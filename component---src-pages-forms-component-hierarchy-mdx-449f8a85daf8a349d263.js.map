{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/components/EditLink.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/forms/component-hierarchy.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["SidebarItem","item","href","key","name","to","SidebarItems","items","isSublist","length","className","map","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","EditLink","sourceUrl","class","aria-hidden","SidebarLayout","children","pageContext","Layout","id","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-forms-component-hierarchy-mdx-449f8a85daf8a349d263.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\n\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function EditLink({ sourceUrl }) {\n  return sourceUrl ? (\n    <div>\n      <i class=\"fa fa-edit\" aria-hidden=\"true\" />{' '}\n      <a href={sourceUrl}>Edit this page on GitHub</a>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport EditLink from '../components/EditLink';\nimport Layout from './Layout';\n\n/**\n * SidebarLayout\n *\n * @class SidebarLayout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location, pageContext }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <EditLink sourceUrl={pageContext.sourceUrl} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"about-the-react-component-hierarchy\"\n    }}>{`About the React component hierarchy`}</h1>\n    <p>{`The VAFS builds a React application of a form, and determines which React components to render based on the description of the form in the form configuration file.`}</p>\n    <h2 {...{\n      \"id\": \"in-this-guide\"\n    }}>{`In this guide`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#about-the-form-component-fields-and-widgets\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`Form`}</inlineCode>{` component, fields, and widgets`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-string-object\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`string`}</inlineCode>{` object`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-string-with-enum-property\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`string`}</inlineCode>{` with `}<inlineCode parentName=\"a\">{`enum`}</inlineCode>{` property`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-object\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`object`}</inlineCode></a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-arrayfield\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`ArrayField`}</inlineCode></a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#field-component-props\"\n        }}>{`Field component props`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#about-the-onchange-field-component\"\n            }}>{`About the `}<inlineCode parentName=\"a\">{`onChange`}</inlineCode>{` field component`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#about-the-uischema-field-component\"\n            }}>{`About the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` field component`}</a></li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"about-the-form-component-fields-and-widgets\"\n    }}>{`About the Form component, fields, and widgets`}</h2>\n    <p>{`At the top level, RJSF uses a `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component to take the schema inputs and render a hierarchy of components for each field of the form:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Fields`}</em>{` generally match the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` attribute in a `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` object. There are object fields, array fields, number fields, boolean fields, and string fields. Except for arrays and objects, the fields render a label (via `}<inlineCode parentName=\"li\">{`FieldTemplate`}</inlineCode>{`) and a widget. To specify a particular field, set the `}<inlineCode parentName=\"li\">{`ui:field`}</inlineCode>{` property to a specific field.`}</li>\n      <li parentName=\"ul\">{`A `}<em parentName=\"li\">{`widget`}</em>{` is the html input element that accepts data from the user. To specify a particular widget, set the  `}<inlineCode parentName=\"li\">{`ui:widget`}</inlineCode>{` property to `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`email`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`checkbox`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`radio`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`select`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`textarea`}</inlineCode>{`. While there are many widgets provided by RJSF, the defaults are overwritten with these versions.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-schema-string-object\"\n    }}>{`Example schema: string object`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'string'\n}\n`}</code></pre>\n    <p>{`The two `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` components determine which fields and widgets to render. `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` uses the two schemas the library accepts, `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, to determine what other `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` component to render. The example chose `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` because the schema type was `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` component then rendered `}<inlineCode parentName=\"p\">{`TextWidget`}</inlineCode>{`, based on `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, because the only information provided was that the field is a string (the default widget type).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <TextWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema-string-with-enum-property\"\n    }}>{`Example schema: string with enum property`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'string',\n  enum: ['first', 'second', 'third']\n}\n`}</code></pre>\n    <p>{`The hierarchy for this field uses `}<inlineCode parentName=\"p\">{`SelectWidget`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`TextWidget`}</inlineCode>{`, because `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` detected the `}<inlineCode parentName=\"p\">{`enum`}</inlineCode>{` property in the schema.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <SelectWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</code></pre>\n    <p>{`While in most cases a field component is responsible for rendering a label and a widget, for `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`array`}</inlineCode>{` schema types, the field component renders additional field components for each of the elements they contain.`}</p>\n    <h3 {...{\n      \"id\": \"example-schema-object\"\n    }}>{`Example schema: object`}</h3>\n    <p>{`This is an `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` schema with two string fields.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    },\n    field2: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ObjectField`}</inlineCode>{` component renders a `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` component for each of its properties. Those properties are both `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` types, so it looks like the first hierarchy, but nested.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <ObjectField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n  </ObjectField>\n</SchemaField>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema-arrayfield\"\n    }}>{`Example schema: ArrayField`}</h3>\n    <p><inlineCode parentName=\"p\">{`ArrayField`}</inlineCode>{` renders a `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` component for each item in the array. The library only uses the array field where each item is an object type schema.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      field1: {\n        type: 'string'\n      },\n      field2: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"field-component-props\"\n    }}>{`Field component props`}</h2>\n    <p>{`In order for each component to know what to render, field components pass a collection of props down through the component hierarchy. Most are passed to widget components.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: The property name of the current field. For example, the object schema above would be named `}<inlineCode parentName=\"li\">{`field1`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`required`}</inlineCode>{`: If the field is required or not (i.e. the property name is in the schema's `}<inlineCode parentName=\"li\">{`required`}</inlineCode>{` array).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schema`}</inlineCode>{`: The schema for the specific field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{`: The ui schema for this field. See \"`}<a parentName=\"li\" {...{\n          \"href\": \"#about-the-uischema-field-component\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` field component`}</a>{`.\"`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorSchema`}</inlineCode>{`: An object that contains the list of errors for the current field and any child properties, if the field is an array or object.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`idSchema`}</inlineCode>{`: An object that contains the field IDs for the current field and any child properties. The library generates IDs for each field by joining each property name with an underscore.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formData`}</inlineCode>{`: The actual data entered for the field so far.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{`: The function that's called when data changes. See \"`}<a parentName=\"li\" {...{\n          \"href\": \"#about-the-onchange-field-component\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`onChange`}</inlineCode>{` field component`}</a>{`.\"`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onBlur`}</inlineCode>{`: The function that's called when focus is lost on a widget.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"about-the-onchange-field-component\"\n    }}>{`About the onChange field component`}</h3>\n    <p>{`When a user enters data, each widget calls `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`. Each component in the hierarchy passes an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler to child fields. When child data changes, the component combines it with the rest of the data and calls the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` prop passed to it from its parent.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In this example:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The user types 'a'.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`TextWidget`}</inlineCode>{` for field1 calls `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` with 'a'.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` property came from the parent `}<inlineCode parentName=\"li\">{`ObjectField`}</inlineCode>{` component, which puts 'a' in an object as `}<inlineCode parentName=\"li\">{`field1`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`{ field1: 'a' }`}</inlineCode>{`), then calls the `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` prop it was passed.`}</li>\n      <li parentName=\"ol\">{`When it reaches the top-level `}<inlineCode parentName=\"li\">{`Form`}</inlineCode>{` component, RJSF runs the JSON Schema validation and passes the results through the component hierarchy.`}</li>\n    </ol>\n    <p>{`Similar to Redux, all state is kept in the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component, or the root of the form. All data processing and validation happens in `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`, or is triggered by hooks provided by `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`. The VAFS code built on top of this processes the schemas and form data in Redux, triggered by events provided by `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"about-the-uischema-field-component\"\n    }}>{`About the uiSchema field component`}</h3>\n    <p>{`Along with the regular JSON Schema, a UI schema for UI-specific options that don't fit within the JSON Schema standard is also optionally defined for each field. The UI schema is passed to the form config file as an object, `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, for each field. For more information, see \"`}<a parentName=\"p\" {...{\n        \"href\": \"/forms/about-the-schema-and-uischema-objects#understanding-the-uischema-object\"\n      }}>{`Understanding the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` object`}</a>{`.\"`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}