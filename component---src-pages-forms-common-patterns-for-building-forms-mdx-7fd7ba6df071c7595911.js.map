{"version":3,"sources":["webpack:///./src/components/EditLink.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/pages/forms/common-patterns-for-building-forms.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["EditLink","sourceUrl","class","aria-hidden","href","SidebarLayout","children","location","pageContext","Layout","className","Sidebar","id","SidebarItem","item","key","name","to","SidebarItems","items","isSublist","length","map","sidebarSection","sidebarData","sections","find","section","pathname","includes","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-forms-common-patterns-for-building-forms-mdx-7fd7ba6df071c7595911.js","sourcesContent":["import React from 'react';\n\nexport default function EditLink({ sourceUrl }) {\n  return sourceUrl ? (\n    <div>\n      <i class=\"fa fa-edit\" aria-hidden=\"true\" />{' '}\n      <a href={sourceUrl}>Edit this page on GitHub</a>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport EditLink from '../components/EditLink';\nimport Layout from './Layout';\n\n/**\n * SidebarLayout\n *\n * @class SidebarLayout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location, pageContext }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row site-l-wrapper\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <EditLink sourceUrl={pageContext.sourceUrl} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\n\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/veteran-facing-services-tools/veteran-facing-services-tools/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"common-patterns-for-building-forms\"\n    }}>{`Common patterns for building forms`}</h1>\n    <p>{`Some forms require custom validation, styles, or conditional information based on user input. Use these patterns to address those needs.`}</p>\n    <h2 {...{\n      \"id\": \"in-this-guide\"\n    }}>{`In this guide`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#writing-custom-field-validation\"\n        }}>{`Writing custom field validation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#validating-a-field-based-on-other-fields-in-the-same-object\"\n        }}>{`Validating a field based on other fields in the same object`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#changing-drop-down-options-based-on-data-in-another-field\"\n        }}>{`Changing drop-down options based on data in another field`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#creating-a-block-of-text-with-no-associated-fields\"\n        }}>{`Creating a block of text with no associated fields`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#conditionally-hiding-a-group-of-fields\"\n        }}>{`Conditionally hiding a group of fields`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#styling-expanded-or-collapsed-fields\"\n        }}>{`Styling expanded or collapsed fields`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#conditionally-including-a-page\"\n        }}>{`Conditionally including a page`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"writing-custom-field-validation\"\n    }}>{`Writing custom field validation`}</h2>\n    <p>{`To add field validations to your forms that JSON Schema doesn't provide, use the array `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` object. `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` can be a function or an object.`}</p>\n    <p>{`If you pass a function, `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` is called with these arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errors`}</inlineCode>{`: The errors object for the field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldData`}</inlineCode>{`: The data for the field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formData`}</inlineCode>{`: The current form data.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schema`}</inlineCode>{`: The current JSON Schema for the field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorMessages`}</inlineCode>{`: The error messsage object for the field, if available.`}</li>\n    </ul>\n    <p>{`Every validation function should update the `}<inlineCode parentName=\"p\">{`errors`}</inlineCode>{` object with any errors found by calling the `}<inlineCode parentName=\"p\">{`addErrors()`}</inlineCode>{` method. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function validateSSN(errors, ssn) {\n  if (!isValidSSN(ssn)) {\n    errors.addError('Please enter a valid 9 digit SSN (dashes allowed)');\n  }\n}\n`}</code></pre>\n    <p>{`When items in the `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` array are objects, they have two properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{`: The object that's passed to the validation function. This allows you to configure your validation function for different fields in the form.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`validator`}</inlineCode>{`: A function with the same signature as above, plus the `}<inlineCode parentName=\"li\">{`options`}</inlineCode>{` object.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  validator: (errors, ssn, formData, schema, errorMessages, options) => {\n    if (!isValidWidget(ssn, options.someOption)) {\n      errors.addError('Please enter a valid 9 digit SSN (dashes allowed)');\n    }\n  },\n  options: {\n    someOption: true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-a-field-based-on-other-fields-in-the-same-object\"\n    }}>{`Validating a field based on other fields in the same object`}</h2>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` to validate objects in order to compare subfields. For example, given this schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  type: 'object',\n  properties: {\n    email: {\n      type: 'string'\n    },\n    confirmEmail: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`If you use `}<inlineCode parentName=\"p\">{`ui:validations`}</inlineCode>{` on this object field instead of on the email or confirmEmail fields, you can compare the two fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export function validateEmailsMatch(errors, pageData) {\n  const { email, confirmEmail } = pageData;\n  if (email !== confirmEmail) {\n    errors.confirmEmail.addError('Please ensure your entries match');\n  }\n}\n`}</code></pre>\n    <p>{`The function must be referenced in the `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  'ui:validations': [ validateEmailsMatch ],\n  email: {\n    'ui:title': 'Email address'\n  },\n  confirmEmail: {\n    'ui:title': 'Re-enter email address'\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"changing-drop-down-options-based-on-data-in-another-field\"\n    }}>{`Changing drop-down options based on data in another field`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`updateSchema`}</inlineCode>{` option in `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` to change a list of enums:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  'ui:options': {\n    updateSchema: (form, pageSchema) {\n      if (form.myField === 'otherOption') {\n        return {\n          enum: ['option1', 'option2'],\n          enumNames: ['Option 1', 'Option 2']\n        }\n      } else {\n        return {\n          enum: ['option1', 'option2'],\n          enumNames: ['Option 1', 'Option 2']\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Only the properties in the returned object are changed in the current schema. The object returned isn't used as an exact replacement for the schema, and if the current schema contains other properties, they aren't removed.`}</p>\n    <p>{`For a long list of options, create all variations of the schema outside of the update function and use the update function to switch between them. You won't need to create a new schema object each time data changes in the form, requiring your field to re-render.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-block-of-text-with-no-associated-fields\"\n    }}>{`Creating a block of text with no associated fields`}</h2>\n    <p>{`Use 'ui:description' to show text or a custom component before the fields in a particular object in the schema.`}</p>\n    <p>{`To create a block of text with no fields that follow, create an empty view object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// schema\n{\n  type: 'object',\n  properties: {\n    'view:textObject': {\n      type: 'object',\n      properties: {}\n    }\n  }\n}\n\n// uiSchema\n{\n  'view:textObject': {\n    'ui:description': 'My text'\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditionally-hiding-a-group-of-fields\"\n    }}>{`Conditionally hiding a group of fields`}</h2>\n    <p>{`Sometimes fields in a form are siblings to others, but should be hidden conditionally. For example, this schema defines a field named `}<inlineCode parentName=\"p\">{`employed`}</inlineCode>{` that is rendered as a checkbox the user can check. If this field is false (the checkbox is not checked) there is no need to display the `}<inlineCode parentName=\"p\">{`jobStartDate`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`monthlyWages`}</inlineCode>{` fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`schema: {\n  type: 'object',\n  properties: {\n    employed: { type: 'boolean' },\n    jobStartDate: { type: 'string' },\n    monthlyWages: { type: 'string' },\n    otherMonthlyIncome: { type: 'string' }\n  }\n}\n\n`}</code></pre>\n    <p>{`To accomplish this, the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` are written as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`schema: {\n  type: 'object',\n  properties: {\n    employed: { type: 'boolean' },\n    'view:jobInformation': {\n      type: 'object',\n      properties: {\n        jobStartDate: { type: 'string' },\n        monthlyWages: { type: 'string' }\n      }\n    },\n    otherMonthlyIncome: { type: 'string' }\n  }\n},\nuiSchema: {\n  employed: { 'ui:title': 'I am employed' },\n  'view:jobInformation': {\n    'ui:options': {\n      hideIf: (formData) => !formData.employed\n    },\n    jobStartDate: { 'ui:title': 'Job start date' },\n    monthlyWages: { 'ui:title': 'Monthly wages' },\n  },\n  otherMonthlyIncome: { 'ui:title': 'Other monthly income' }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hideIf`}</inlineCode>{` function is passed a copy of the current `}<inlineCode parentName=\"p\">{`formData`}</inlineCode>{` in order to determine the condition upon which the fields are shown. In this example, it will hide the fields unless `}<inlineCode parentName=\"p\">{`employed`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`Objects from the form config with names that start with `}<inlineCode parentName=\"p\">{`view:`}</inlineCode>{` are not passed to the back-end, but fields within those `}<inlineCode parentName=\"p\">{`view:`}</inlineCode>{` objects are passed to the back-end by including them in the parent object. In this example, the fields `}<inlineCode parentName=\"p\">{`jobStartDate`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`monthlyWages`}</inlineCode>{` would be included in the same object as `}<inlineCode parentName=\"p\">{`employed`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`otherMonthlyIncome`}</inlineCode>{`, while the field for `}<inlineCode parentName=\"p\">{`view:JobInformation`}</inlineCode>{` would be filtered out.`}</p>\n    <h2 {...{\n      \"id\": \"styling-expanded-or-collapsed-fields\"\n    }}>{`Styling expanded or collapsed fields`}</h2>\n    <p>{`To indent or otherwise style fields that are expanded or collapsed with the `}<inlineCode parentName=\"p\">{`expandUnder`}</inlineCode>{` option, set a class on the controlling field. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// uiSchema\n{\n  field1: {\n    'ui:title': 'This field expands/collapses other items',\n    'ui:options': {\n      expandUnderClassNames: 'schemaform-expandUnder-indent'\n    }\n  },\n  field2: {\n    'ui:title': 'This field is controlled by field1'\n    'ui:options': {\n      expandUnder: 'field1'\n    }\n  },\n  field3: {\n    'ui:title': 'This field is controlled by field1'\n    'ui:options': {\n      expandUnder: 'field1'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In this example, `}<inlineCode parentName=\"p\">{`schemaform-expandUnder-indent`}</inlineCode>{` is applied to the `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` that surrounds `}<inlineCode parentName=\"p\">{`field2`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`field3`}</inlineCode>{`, which indents the fields. For additional styling, create a new class and add your own styles.`}</p>\n    <h2 {...{\n      \"id\": \"conditionally-including-a-page\"\n    }}>{`Conditionally including a page`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`depends`}</inlineCode>{` property determines whether a page is active or not. `}<inlineCode parentName=\"p\">{`depends`}</inlineCode>{` can work in a few ways:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// With an object\ndepends: {\n  passPhrase: 'open sesame'\n}\n\n// With an array\n// This will activate the page if any of the items in the array are true. Think || not &&.\ndepends: [\n  { passPhrase: 'open sesame' },\n  { passPhrase: 'open up!' }\n]\n\n// With a function\ndepends: (formData) => {\n  // return bool, true if page is active, false if page should be skipped\n  return formData.passPhrase === 'open sesame' && formData.codeWord === 'chicken';\n}\n`}</code></pre>\n    <p>{`For example, given this chapter configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`chapterName: {\n  title: 'Chapter Title',\n  pages: {\n    pageName: {\n      ...\n      schema: {\n        type: 'object',\n        properties: {\n          passPhrase: { type: 'string' }\n        }\n      }\n    }\n    otherPageName: {\n      title: 'Page title',\n      path: 'path/to/page',\n      initialData: {},\n      depends: {\n        passPhrase: 'open sesame'\n      },\n      uiSchema: {},\n      schema: {}\n    }\n  }\n}\n`}</code></pre>\n    <p>{`If a user types 'open sesame' for the `}<inlineCode parentName=\"p\">{`passPhrase`}</inlineCode>{` on the first page, `}<inlineCode parentName=\"p\">{`otherPageName`}</inlineCode>{` is active. For any other value, including no value, `}<inlineCode parentName=\"p\">{`otherPageName`}</inlineCode>{` is inactive and the page is skipped.`}</p>\n    <p><strong parentName=\"p\">{`Don't use the pass phrase as a secure login or other authentication mechanism.`}</strong>{` Within the source, the text of a pass phrase is clear text, even when it's in a function.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}