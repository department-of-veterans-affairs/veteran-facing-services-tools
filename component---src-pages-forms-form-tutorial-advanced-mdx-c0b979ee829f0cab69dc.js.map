{"version":3,"sources":["webpack:///./src/pages/forms/form-tutorial-advanced.mdx","webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/components/pageFooter/Components.jsx","webpack:///./src/components/pageFooter/Documentation.jsx","webpack:///./src/components/pageFooter/PageFooter.jsx","webpack:///./src/layouts/SidebarLayout.jsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","ComponentList","query","render","data","SidebarItems","items","edges","map","comp","href","node","path","name","context","SidebarItem","item","key","to","isSublist","length","className","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","componentToMatch","toLowerCase","ComponentItem","link","base","Components","splits","split","getPathName","pathName","replace","charAt","substring","Documentation","level1","indexmdx","Array","isArray","lvl2Item","getIndexMdx","PageFooter","class","aria-hidden","getGithubHref","SidebarLayout","children","Layout","id"],"mappings":"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","file":"component---src-pages-forms-form-tutorial-advanced-mdx-c0b979ee829f0cab69dc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"advanced-tutorial\"\n    }}>{`Advanced tutorial`}</h1>\n    <p>{`Previous: `}<a parentName=\"p\" {...{\n        \"href\": \"/veteran-facing-services-tools/forms/form-tutorial-intermediate\"\n      }}>{`Intermediate tutorial`}</a></p>\n    <h2 {...{\n      \"id\": \"using-common-definitions\"\n    }}>{`Using Common Definitions`}</h2>\n    <p>{`All of our forms share schemas with the back-end through `}<inlineCode parentName=\"p\">{`vets-json-schema`}</inlineCode>{`, the repository where we store JSON Schemas for validating data submitted to a `}<inlineCode parentName=\"p\">{`vets-api`}</inlineCode>{` API endpoint. Assuming you've created one of those schemas, the next step is to incorporate that into your form, along with other common definitions we've built.`}</p>\n    <h2 {...{\n      \"id\": \"adding-your-schema\"\n    }}>{`Adding your schema`}</h2>\n    <p>{`Assuming you've created your form using our form scaffolding generator, you should have some commented out lines in your `}<inlineCode parentName=\"p\">{`config/form.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\n\n// ...code omitted...\n\n// const { } = fullSchema.properties;\n\n// const { } = fullSchema.definitions;\n`}</code></pre>\n    <p>{`If you uncomment those lines and update the import path to match your schema's file name, you can start pulling in individual definitions and properties to use in your form. We try to use the properties from the shared schema as much as possible, since it helps keep the front-end and back-end in sync and avoid validation errors in production. For example, if you want to import an `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` field from your schema, you can do something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\n\n// ...code omitted...\n\nconst {\n  email\n} = fullSchema.properties;\n\n// const { } = fullSchema.definitions;\n\nconst formConfig = {\n   // ...code omitted...\n   page1: {\n     path: 'first-page',\n     title: 'First Page',\n     uiSchema: {\n       email: {\n         'ui:title': 'My field label'\n       }\n     },\n     schema: {\n       type: 'object',\n       properties: {\n         email\n       }\n     }\n   }\n   // ...code omitted...\n};\n`}</code></pre>\n    <p>{`Here we're using Javascript's object shorthand syntax to set the `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` property to the object from the shared schema properties. That way we know we're using the same field name and using the same definition type as what will be used by the back-end. Note that we still need to be careful that we include all the fields we need from `}<inlineCode parentName=\"p\">{`fullSchema`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"using-a-common-front-end-definition\"\n    }}>{`Using a common front-end definition`}</h2>\n    <p>{`We have a collection of common definitions and fields on the front-end for you to use in your form. Let's try using our common full name field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\nimport fullNameUI from '../../common/schemaform/definitions/fullName';\n// ...code omitted...\n\nconst {\n  veteranFullName\n} = fullSchema.properties;\n\nconst {\n  fullName\n} = fullSchema.definitions;\n\nconst formConfig = {\n  // ...code omitted...\n  definitions: {\n    fullName\n  },\n  // ...code omitted...\n    page1: {\n      path: 'first-page',\n      title: 'First Page',\n      uiSchema: {\n        veteranFullName: fullNameUI\n      },\n      schema: {\n        type: 'object',\n        properties: {\n          veteranFullName\n        }\n      }\n    }\n   // ...code omitted...\n};\n`}</code></pre>\n    <p>{`There are a few things going on here. One, we've pulled the `}<inlineCode parentName=\"p\">{`fullName`}</inlineCode>{` definition from `}<inlineCode parentName=\"p\">{`fullSchema`}</inlineCode>{`. JSON Schema's method of code reuse has you put definitions in a `}<inlineCode parentName=\"p\">{`definitions`}</inlineCode>{` object in the schema, then reference them with a `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{` property, so we have to account for that on the front-end. We can do that by importing it from `}<inlineCode parentName=\"p\">{`fullSchema.definitions`}</inlineCode>{` and adding it to the `}<inlineCode parentName=\"p\">{`definitions`}</inlineCode>{` object in our form config object.`}</p>\n    <p>{`Second, we've imported `}<inlineCode parentName=\"p\">{`fullNameUI`}</inlineCode>{` from our common front-end definitions. For this field, we just have some `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` configuration that sets labels and widget types. Other fields are more complex, and may require you to call a function to generate the right configuration, and possibly import something for the regular `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` object as well.`}</p>\n    <p>{`Finally, in the code you can see that we're using `}<inlineCode parentName=\"p\">{`fullNameUI`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` object, and we're using `}<inlineCode parentName=\"p\">{`veteranFullName`}</inlineCode>{` like we used `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` previously.`}</p>\n    <h2 {...{\n      \"id\": \"modifying-common-definitions\"\n    }}>{`Modifying common definitions`}</h2>\n    <p>{`Often you'll need to slightly modify common definitions on the front-end to change a label or some conditional logic. The way we typically do that is to use our data utilities to set values on the schema. For example, say we needed to make our `}<inlineCode parentName=\"p\">{`veteranFullName`}</inlineCode>{` field expand underneath another field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { set } from 'platform/utilities/data';\nimport fullSchema from 'vets-json-schema/dist/VIC-schema.json';\nimport fullNameUI from '../../common/schemaform/definitions/fullName';\n// ...code omitted...\n\nconst {\n  veteranFullName\n} = fullSchema.properties;\n\nconst {\n  fullName\n} = fullSchema.definitions;\n\nconst formConfig = {\n   // ...code omitted...\n  definitions: {\n    fullName\n  },\n  // ...code omitted...\n    page1: {\n      path: 'first-page',\n      title: 'First Page',\n      uiSchema: {\n        myField: {\n          'ui:title': 'My field',\n          'ui:widget': 'yesNo'\n        },\n        veteranFullName: set('ui:options.expandUnder', 'myField', fullNameUI)\n      },\n      schema: {\n        type: 'object',\n        properties: {\n          myField: { type: 'boolean' },\n          veteranFullName\n        }\n      }\n    }\n   // ...code omitted...\n};\n`}</code></pre>\n    <p>{`We're using one of the available data utilities to set the expandUnder value for fullNameUI in a way that doesn't modify the existing fullNameUI object. All of the data functions in `}<inlineCode parentName=\"p\">{`platform/utilities/data`}</inlineCode>{` treat objects as immutable, not modifying anything you pass in to them, so you can reuse `}<inlineCode parentName=\"p\">{`fullNameUI`}</inlineCode>{` in another spot in your form without worrying about having to remove the `}<inlineCode parentName=\"p\">{`ui:options`}</inlineCode>{` configuration we added.`}</p>\n    <h2 {...{\n      \"id\": \"things-to-watch-out-for\"\n    }}>{`Things to watch out for`}</h2>\n    <p>{`The point of having these common definitions and sharing a schema between the front-end and back-end is to encourage consistency in our forms and to reduce errors when submitting a form to a `}<inlineCode parentName=\"p\">{`vets-api`}</inlineCode>{` endpoint. But following the guide above won't completely prevent those issues. Here are some things to keep in mind:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Since we're importing individual fields from `}<inlineCode parentName=\"li\">{`fullSchema`}</inlineCode>{`, it can be easy to miss required field rules, since we often import those directly. Make sure you're marking all the necessary fields as required in your form config.`}</li>\n      <li parentName=\"ul\">{`Importing individual fields makes it easy to group them in ways specific to the front-end, so make sure if you are grouping things, you're using property names prefixed with `}<inlineCode parentName=\"li\">{`view:`}</inlineCode>{` to remove that grouping before submitting.`}</li>\n    </ul>\n    <p>{`Next: `}<a parentName=\"p\" {...{\n        \"href\": \"/veteran-facing-services-tools/forms/save-in-progress\"\n      }}>{`Setting up Save in Progress`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems\n          items={data.components.edges.map(comp => ({\n            href: comp.node.path,\n            name: comp.node.context.name,\n          }))}\n        />\n      )}\n    />\n  );\n}\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        if (item.query === 'componentList') {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <ComponentList />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Finds a specific component inside a list\n *\n * @param {string} componentToMatch\n */\n\nfunction ComponentList({ componentToMatch }) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentsQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) =>\n        data.components.edges.map((comp) => {\n          return componentToMatch === comp.node.context.name.toLowerCase() ? (\n            <ComponentItem\n              item={{\n                name: comp.node.context.name,\n              }}\n            />\n          ) : (\n            ''\n          );\n        })\n      }\n    />\n  );\n}\n\nfunction ComponentItem({ item }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const formationReact = '/formation-react/src/components/';\n  const link = base + formationReact + item.name + '/' + item.name + '.mdx';\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n\nexport default function Components({ pathname }) {\n  const splits = pathname.split('/');\n  return <ComponentList componentToMatch={splits[3]} />;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport sidebarData from '../../sidebar';\n\n/**\n * This function will return if the name of the file is index.mdx\n * instead of the default value\n * @param {object} location - Used to obtain the page location\n * @returns {string} - Return either index or empty if not needed\n */\n\nconst getIndexMdx = (location) => {\n  const pathName = getPathName(location);\n\n  const sidebarSection = sidebarData.sections.find((section) =>\n    pathName.includes(section.href),\n  );\n\n  // Test first Level of the sidebar object\n  const level1 = sidebarData.sections.find(\n    (section) => section.href === pathName,\n  );\n\n  if (level1?.indexmdx) {\n    return '/index';\n  }\n\n  // Test second Level of the sidebar object\n  if (sidebarSection?.items) {\n    const level2Sections = sidebarSection.items.map((item) => {\n      return Array.isArray(item.items)\n        ? item.items.find((lvl2Item) => lvl2Item.href === pathName)\n        : null;\n    });\n\n    const level2 = level2Sections.map((section) => {\n      if (section?.href && section.href === pathName) {\n        return section?.indexmdx ? true : false;\n      }\n    });\n\n    if (level2.find((indexmdx) => indexmdx)) {\n      return '/index';\n    }\n  }\n\n  return '';\n};\n\nconst getPathName = (location) => {\n  // Remove extra path in production environment\n  let pathName = location.pathname.replace(\n    '/veteran-facing-services-tools',\n    '',\n  );\n\n  // Check for additional '/' at the end when refreshing the browser\n  if (pathName.length > 0 && pathName.charAt(pathName.length - 1) === '/') {\n    pathName = pathName.substring(0, pathName.length - 1);\n  }\n\n  return pathName;\n};\n\nexport default function Documentation({ location }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const documentation = '/documentation/src/pages';\n  const link =\n    base +\n    documentation +\n    getPathName(location) +\n    getIndexMdx(location) +\n    '.mdx';\n\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n","import React from 'react';\nimport Components from './Components';\nimport Documentation from './Documentation';\n\nconst getGithubHref = (location) => {\n  if (location.pathname.includes('components')) {\n    const pathName = location.pathname.replace(\n      '/veteran-facing-services-tools',\n      '',\n    );\n    return <Components pathname={pathName} />;\n  } else {\n    return <Documentation location={location} />;\n  }\n};\n\nexport default function PageFooter({ location }) {\n  return (\n    <div>\n      <p>\n        <br />\n        <i class=\"fa fa-edit\" aria-hidden=\"true\"></i> {getGithubHref(location)}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Layout from './Layout';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport PageFooter from '../components/pageFooter/PageFooter';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <PageFooter location={location} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"sourceRoot":""}