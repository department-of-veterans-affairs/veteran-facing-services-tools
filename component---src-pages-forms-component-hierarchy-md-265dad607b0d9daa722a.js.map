{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/components/pageFooter/Components.jsx","webpack:///./src/components/pageFooter/Documentation.jsx","webpack:///./src/components/pageFooter/PageFooter.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/forms/component-hierarchy.md"],"names":["ComponentList","query","render","data","SidebarItems","items","components","edges","map","comp","href","node","path","name","context","SidebarItem","item","key","to","isSublist","length","className","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","componentToMatch","toLowerCase","ComponentItem","link","base","Components","splits","split","Documentation","replace","pathName","level1","indexmdx","Array","isArray","lvl2Item","getIndexMdx","PageFooter","class","aria-hidden","getGithubHref","SidebarLayout","children","Layout","id","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-forms-component-hierarchy-md-265dad607b0d9daa722a.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems\n          items={data.components.edges.map(comp => ({\n            href: comp.node.path,\n            name: comp.node.context.name,\n          }))}\n        />\n      )}\n    />\n  );\n}\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        if (item.query === 'componentList') {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <ComponentList />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Finds a specific component inside a list\n *\n * @param {string} componentToMatch\n */\n\nfunction ComponentList({ componentToMatch }) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentsQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) =>\n        data.components.edges.map((comp) => {\n          return componentToMatch === comp.node.context.name.toLowerCase() ? (\n            <ComponentItem\n              item={{\n                name: comp.node.context.name,\n              }}\n            />\n          ) : (\n            ''\n          );\n        })\n      }\n    />\n  );\n}\n\nfunction ComponentItem({ item }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const formationReact = '/formation-react/src/components/';\n  const link = base + formationReact + item.name + '/' + item.name + '.mdx';\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n\nexport default function Components({ pathname }) {\n  const splits = pathname.split('/');\n  return <ComponentList componentToMatch={splits[3]} />;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport sidebarData from '../../sidebar';\n\n/**\n * This function will return if the name of the file is index.mdx\n * instead of the default value\n * @param {object} location - Used to obtain the page location\n * @returns {string} - Return either index or empty if not needed\n */\n\nconst getIndexMdx = (location) => {\n  const pathName = location.pathname.replace(\n    '/veteran-facing-services-tools',\n    '',\n  );\n\n  const sidebarSection = sidebarData.sections.find((section) =>\n    pathName.includes(section.href),\n  );\n\n  // Test first Level of the sidebar object\n  const level1 = sidebarData.sections.find(\n    (section) => section.href === pathName,\n  );\n\n  if (level1?.indexmdx) {\n    return '/index';\n  }\n\n  // Test second Level of the sidebar object\n  if (sidebarSection?.items) {\n    const level2Sections = sidebarSection.items.map((item) => {\n      return Array.isArray(item.items)\n        ? item.items.find((lvl2Item) => lvl2Item.href === pathName)\n        : null;\n    });\n\n    const level2 = level2Sections.map((section) => {\n      if (section?.href && section.href === pathName) {\n        return section?.indexmdx ? true : false;\n      }\n    });\n\n    if (level2.find((indexmdx) => indexmdx)) {\n      return '/index';\n    }\n  }\n\n  return '';\n};\n\nexport default function Documentation({ location }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const documentation = '/documentation/src/pages';\n  const pathName = location.pathname.replace(\n    '/veteran-facing-services-tools',\n    '',\n  );\n  const link = base + documentation + pathName + getIndexMdx(location) + '.mdx';\n\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n","import React from 'react';\nimport Components from './Components';\nimport Documentation from './Documentation';\n\nconst getGithubHref = (location) => {\n  if (location.pathname.includes('components')) {\n    const pathName = location.pathname.replace(\n      '/veteran-facing-services-tools',\n      '',\n    );\n    return <Components pathname={pathName} />;\n  } else {\n    return <Documentation location={location} />;\n  }\n};\n\nexport default function PageFooter({ location }) {\n  return (\n    <div>\n      <p>\n        <br />\n        <i class=\"fa fa-edit\" aria-hidden=\"true\"></i> {getGithubHref(location)}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Layout from './Layout';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport PageFooter from '../components/pageFooter/PageFooter';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <PageFooter location={location} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"about-the-react-component-hierarchy\"\n    }}>{`About the React component hierarchy`}</h1>\n    <p>{`The VAFS builds a React application of a form, and determines which React components to render based on the description of the form in the form configuration file.`}</p>\n    <h2 {...{\n      \"id\": \"in-this-guide\"\n    }}>{`In this guide`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#about-the-form-component-fields-and-widgets\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`Form`}</inlineCode>{` component, fields, and widgets`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-string-object\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`string`}</inlineCode>{` object`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-string-with-enum-property\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`string`}</inlineCode>{` with `}<inlineCode parentName=\"a\">{`enum`}</inlineCode>{` property`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-object\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`object`}</inlineCode></a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#example-schema-arrayfield\"\n            }}>{`Example schema: `}<inlineCode parentName=\"a\">{`ArrayField`}</inlineCode></a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#field-component-props\"\n        }}>{`Field component props`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#about-the-onchange-field-component\"\n            }}>{`About the `}<inlineCode parentName=\"a\">{`onChange`}</inlineCode>{` field component`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#about-the-uischema-field-component\"\n            }}>{`About the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` field component`}</a></li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"about-the-form-component-fields-and-widgets\"\n    }}>{`About the Form component, fields, and widgets`}</h2>\n    <p>{`At the top level, RJSF uses a `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component to take the schema inputs and render a hierarchy of components for each field of the form:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Fields`}</em>{` generally match the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` attribute in a `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` object. There are object fields, array fields, number fields, boolean fields, and string fields. Except for arrays and objects, the fields render a label (via `}<inlineCode parentName=\"li\">{`FieldTemplate`}</inlineCode>{`) and a widget. To specify a particular field, set the `}<inlineCode parentName=\"li\">{`ui:field`}</inlineCode>{` property to a specific field.`}</li>\n      <li parentName=\"ul\">{`A `}<em parentName=\"li\">{`widget`}</em>{` is the html input element that accepts data from the user. To specify a particular widget, set the  `}<inlineCode parentName=\"li\">{`ui:widget`}</inlineCode>{` property to `}<inlineCode parentName=\"li\">{`text`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`email`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`checkbox`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`radio`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`select`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`textarea`}</inlineCode>{`. While there are many widgets provided by RJSF, the defaults are overwritten with these versions.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-schema-string-object\"\n    }}>{`Example schema: string object`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'string'\n}\n`}</code></pre>\n    <p>{`The two `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` components determine which fields and widgets to render. `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` uses the two schemas the library accepts, `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, to determine what other `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` component to render. The example chose `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` because the schema type was `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` component then rendered `}<inlineCode parentName=\"p\">{`TextWidget`}</inlineCode>{`, based on `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, because the only information provided was that the field is a string (the default widget type).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <TextWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema-string-with-enum-property\"\n    }}>{`Example schema: string with enum property`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'string',\n  enum: ['first', 'second', 'third']\n}\n`}</code></pre>\n    <p>{`The hierarchy for this field uses `}<inlineCode parentName=\"p\">{`SelectWidget`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`TextWidget`}</inlineCode>{`, because `}<inlineCode parentName=\"p\">{`StringField`}</inlineCode>{` detected the `}<inlineCode parentName=\"p\">{`enum`}</inlineCode>{` property in the schema.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <SelectWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</code></pre>\n    <p>{`While in most cases a field component is responsible for rendering a label and a widget, for `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`array`}</inlineCode>{` schema types, the field component renders additional field components for each of the elements they contain.`}</p>\n    <h3 {...{\n      \"id\": \"example-schema-object\"\n    }}>{`Example schema: object`}</h3>\n    <p>{`This is an `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` schema with two string fields.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    },\n    field2: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ObjectField`}</inlineCode>{` component renders a `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` component for each of its properties. Those properties are both `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` types, so it looks like the first hierarchy, but nested.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<SchemaField>\n  <ObjectField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n  </ObjectField>\n</SchemaField>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema-arrayfield\"\n    }}>{`Example schema: ArrayField`}</h3>\n    <p><inlineCode parentName=\"p\">{`ArrayField`}</inlineCode>{` renders a `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` component for each item in the array. The library only uses the array field where each item is an object type schema.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      field1: {\n        type: 'string'\n      },\n      field2: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"field-component-props\"\n    }}>{`Field component props`}</h2>\n    <p>{`In order for each component to know what to render, field components pass a collection of props down through the component hierarchy. Most are passed to widget components.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: The property name of the current field. For example, the object schema above would be named `}<inlineCode parentName=\"li\">{`field1`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`required`}</inlineCode>{`: If the field is required or not (i.e. the property name is in the schema's `}<inlineCode parentName=\"li\">{`required`}</inlineCode>{` array).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schema`}</inlineCode>{`: The schema for the specific field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{`: The ui schema for this field. See \"`}<a parentName=\"li\" {...{\n          \"href\": \"#about-the-uischema-field-component\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` field component`}</a>{`.\"`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorSchema`}</inlineCode>{`: An object that contains the list of errors for the current field and any child properties, if the field is an array or object.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`idSchema`}</inlineCode>{`: An object that contains the field IDs for the current field and any child properties. The library generates IDs for each field by joining each property name with an underscore.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formData`}</inlineCode>{`: The actual data entered for the field so far.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{`: The function that's called when data changes. See \"`}<a parentName=\"li\" {...{\n          \"href\": \"#about-the-onchange-field-component\"\n        }}>{`About the `}<inlineCode parentName=\"a\">{`onChange`}</inlineCode>{` field component`}</a>{`.\"`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onBlur`}</inlineCode>{`: The function that's called when focus is lost on a widget.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"about-the-onchange-field-component\"\n    }}>{`About the onChange field component`}</h3>\n    <p>{`When a user enters data, each widget calls `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`. Each component in the hierarchy passes an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler to child fields. When child data changes, the component combines it with the rest of the data and calls the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` prop passed to it from its parent.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`In this example:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The user types 'a'.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`TextWidget`}</inlineCode>{` for field1 calls `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` with 'a'.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` property came from the parent `}<inlineCode parentName=\"li\">{`ObjectField`}</inlineCode>{` component, which puts 'a' in an object as `}<inlineCode parentName=\"li\">{`field1`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`{ field1: 'a' }`}</inlineCode>{`), then calls the `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` prop it was passed.`}</li>\n      <li parentName=\"ol\">{`When it reaches the top-level `}<inlineCode parentName=\"li\">{`Form`}</inlineCode>{` component, RJSF runs the JSON Schema validation and passes the results through the component hierarchy.`}</li>\n    </ol>\n    <p>{`Similar to Redux, all state is kept in the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component, or the root of the form. All data processing and validation happens in `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`, or is triggered by hooks provided by `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`. The VAFS code built on top of this processes the schemas and form data in Redux, triggered by events provided by `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"about-the-uischema-field-component\"\n    }}>{`About the uiSchema field component`}</h3>\n    <p>{`Along with the regular JSON Schema, a UI schema for UI-specific options that don't fit within the JSON Schema standard is also optionally defined for each field. The UI schema is passed to the form config file as an object, `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, for each field. For more information, see \"`}<a parentName=\"p\" {...{\n        \"href\": \"/forms/about-the-schema-and-uischema-objects#understanding-the-uischema-object\"\n      }}>{`Understanding the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` object`}</a>{`.\"`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}