{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/forms/form-tutorial-intermediate.mdx"],"names":["ComponentList","query","render","data","SidebarItems","items","components","edges","map","comp","href","node","path","name","context","SidebarItem","item","key","to","isSublist","length","className","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","SidebarLayout","children","Layout","id","layoutProps","MDXContent","props","layout","DefaultLayout","this","Object","assign","parentName","style","target","rel","alt","title","src","srcSet","sizes","loading","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-forms-form-tutorial-intermediate-mdx-1722aaa58f10ad2aa348.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems\n          items={data.components.edges.map(comp => ({\n            href: comp.node.path,\n            name: comp.node.context.name,\n          }))}\n        />\n      )}\n    />\n  );\n}\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        if (item.query === 'componentList') {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <ComponentList />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Layout from './Layout';\nimport Sidebar from '../components/sidebar/Sidebar';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"intermediate-tutorial\">Intermediate tutorial</h1>\n      <MDXTag name=\"p\" components={components}>{`Previous: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/forms/form-tutorial-basic\"\n        }}>{`Basic tutorial`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Now that you've gone through and created a really simple form using the tutorial, let's take a look at how to handle some common use cases on forms.`}</MDXTag>\n      <h2 id=\"form-validation\">Form validation</h2>\n      <MDXTag name=\"p\" components={components}>{`Because our forms are based on JSON Schema, you can rely on the built in types and pattern property to do a lot of your validation. However, sometimes you need validation rules that go beyond what JSON Schema offers. To write custom validation, we have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validation`}</MDXTag>{` helper:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field label',\n      'ui:validation': [\n        (errors, field) => {\n          if (field && field.startsWith('bad')) {\n            errors.addError(\"Sorry, you can't start this field with 'bad'\");\n          }\n        }\n      ]\n    }\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validation`}</MDXTag>{` takes an array of functions, each of which is passed an errors object and the field data (plus some other parameters). So in the above example, if a user puts 'badString' in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myField`}</MDXTag>{`, then the form will display a validation error with the message passed in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addError()`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`One thing to note is that you can add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validation`}</MDXTag>{` on any field or object in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`, which allows you to validate groups of fields together:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    email: {\n      'ui:title': 'Email',\n    },\n    confirmEmail: {\n      'ui:title': 'Confirm email'\n    },\n    'ui:validation': [\n      (errors, field) => {\n        if (field.email !== field.confirmEmail) {\n          errors.confirmEmail.addError('Sorry, your emails must match');\n        }\n      }\n    ]\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string'\n      },\n      confirmEmail: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Since we moved the validation array up to the root of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`, the field data it is passed is an object containing both `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`email`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`confirmEmail`}</MDXTag>{`, and we can set validation errors on either field.`}</MDXTag>\n      <h3 id=\"custom-validation-error-messages\">Custom validation error messages</h3>\n      <MDXTag name=\"p\" components={components}>{`In addition to the above custom validation, you can also customize the messages for the built in JSON Schema validation. For example, if I have some pattern validation, I can set an understandable message:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field',\n      'ui:errorMessages': {\n        pattern: 'Sorry, you must enter all digits'\n      }\n    },\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'string',\n        pattern: '^\\d+\\$'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"conditional-required-fields\">Conditional required fields</h2>\n      <MDXTag name=\"p\" components={components}>{`In some cases you may want to have fields be required only under certain conditions. To handle that, you can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:required`}</MDXTag>{` helper:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field',\n    },\n    myOtherField: {\n      'ui:title': 'My field',\n      'ui:required': (formData) => formData.myField === 'test'\n    },\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'string',\n      }\n      myOtherField: {\n        type: 'string',\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In the above config, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myOtherField`}</MDXTag>{` will be required if `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myField`}</MDXTag>{` equals \"test\". The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`formData`}</MDXTag>{` parameter contains all of the form data, across all pages, so your conditional logic can be based on any other data in the form.`}</MDXTag>\n      <h2 id=\"conditionally-displayed-fields\">Conditionally displayed fields</h2>\n      <MDXTag name=\"p\" components={components}>{`Often when building forms you'll need to hide and show fields based on form data or other information. Our form system has three ways of doing so.`}</MDXTag>\n      <h4 id=\"expand-under-fields\">Expand under fields</h4>\n      <MDXTag name=\"p\" components={components}>{`A common pattern is to expand some fields \"underneath\" others, when a user enters information in a field that requires more information to be collected:`}</MDXTag>\n      <MDXTag name=\"p\" components={components}><span className=\"gatsby-resp-image-wrapper\" style={{\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"534px\"\n        }}>\n      <a className=\"gatsby-resp-image-link\" href=\"/veteran-facing-services-tools/static/acb74d8d8ce49a5745002e38ca6fb0a4/a07a7/expand_under.png\" style={{\n            \"display\": \"block\"\n          }} target=\"_blank\" rel=\"noopener\">\n    <span className=\"gatsby-resp-image-background-image\" style={{\n              \"paddingBottom\": \"30.115830115830118%\",\n              \"position\": \"relative\",\n              \"bottom\": \"0px\",\n              \"left\": \"0px\",\n              \"backgroundSize\": \"cover\",\n              \"display\": \"block\"\n            }}></span>\n  <img className=\"gatsby-resp-image-image\" alt=\"expand under\" title=\"expand under\" src=\"/veteran-facing-services-tools/static/acb74d8d8ce49a5745002e38ca6fb0a4/a07a7/expand_under.png\" srcSet=\"/veteran-facing-services-tools/static/acb74d8d8ce49a5745002e38ca6fb0a4/a2ead/expand_under.png 259w,\n/veteran-facing-services-tools/static/acb74d8d8ce49a5745002e38ca6fb0a4/6b9fd/expand_under.png 518w,\n/veteran-facing-services-tools/static/acb74d8d8ce49a5745002e38ca6fb0a4/a07a7/expand_under.png 534w\" sizes=\"(max-width: 534px) 100vw, 534px\" style={{\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0px\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"top\": \"0px\",\n              \"left\": \"0px\"\n            }} loading=\"lazy\" />\n  </a>\n    </span></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To do that, you can use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expandUnder`}</MDXTag>{` option:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field',\n      'ui:widget': 'yesNo'\n    },\n    myConditionalField: {\n      'ui:title': 'My conditional field',\n      'ui:options': {\n        expandUnder: 'myField'\n      }\n    },\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'boolean',\n      }\n      myOtherField: {\n        type: 'string',\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In the above example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myConditionalField`}</MDXTag>{` will display whenever `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myField`}</MDXTag>{` has a truthy value. You can add this to mutiple fields and all of them will be grouped under the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expandUnder`}</MDXTag>{` field. Note, however, that if any of these hidden fields are required when visible, you'll have to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:required`}</MDXTag>{` to make sure they're not required when they're not displayed.`}</MDXTag>\n      <h3 id=\"conditionally-hidden-fields\">Conditionally hidden fields</h3>\n      <MDXTag name=\"p\" components={components}>{`If you just need to hide or show a field, without the expand under treatment, you can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`hideIf`}</MDXTag>{`:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field',\n      'ui:widget': 'yesNo'\n    },\n    myConditionalField: {\n      'ui:title': 'My conditional field',\n      'ui:options': {\n        hideIf: (formData) => formData.myField !== true\n      }\n    },\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'boolean'\n      }\n      myOtherField: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In the above example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myConditionalField`}</MDXTag>{` is hidden when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myField`}</MDXTag>{` is not true (meaning it's false or undefined).`}</MDXTag>\n      <h2 id=\"conditional-pages\">Conditional pages</h2>\n      <MDXTag name=\"p\" components={components}>{`Another situation you may encounter is needing to make an entire page of the form conditional. You can do that with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`depends`}</MDXTag>{` property:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  depends: (form) => form.fieldOnAnotherPage !== 'test',\n  uiSchema: {\n    myField: {\n      'ui:title': 'My field',\n      'ui:widget': 'yesNo'\n    }\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      myField: {\n        type: 'boolean'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The depends function is passed the current form data, so you can check different conditions and return false if want to skip a page. Note that you want to make sure you're checking data a user would enter before potentially reaching this page, otherwise they won't ever see it.`}</MDXTag>\n      <h2 id=\"view-only-data\">View-only data</h2>\n      <MDXTag name=\"p\" components={components}>{`In some cases, you may have fields that you don't need to submit along with the form data. A confirmation email field, for example. In other cases you may also want to group fields into objects but not have that grouping reflected in the submitted data. This can be useful if you need to conditionally hide a group of fields and don't want to write hideIf functions every individual field.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To keep a field from being submitted, you can prefix it with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{`:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    email: {\n      'ui:title': 'Email',\n    },\n    'view:confirmEmail': {\n      'ui:title': 'Confirm email'\n    }\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string'\n      },\n      'view:confirmEmail': {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Since we've prefixed `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`confirmEmail`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{`, that field will be removed before submitting the completed form.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If you prefix an object with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{`, something slightly different will happen:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`page1: {\n  path: 'first-page',\n  title: 'First Page',\n  uiSchema: {\n    email: {\n      'ui:title': 'Email',\n    },\n    'view:confirmEmail': {\n      'ui:title': 'Confirm email'\n    }\n  },\n  schema: {\n    type: 'object',\n    properties: {\n      'view:emails': {\n        email: {\n          type: 'string'\n        },\n        'confirmEmail': {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In this case, the form data that's submitted when a user completes a form would be:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  email: 'test@test.com',\n  confirmEmail: 'test@test.com'\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If we had left off the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{` prefix it would be:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  emails: {\n    email: 'test@test.com',\n    confirmEmail: 'test@test.com'\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`That should get you started with some of the common validation and conditional field scenarios. Many of the options above have extra parameters or options that may help with some less common scenarios, so make sure to check the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/forms/config-options\"\n        }}>{`form config specification`}</MDXTag>{` for a full picture of all the options offered.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Next: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/forms/form-tutorial-advanced\"\n        }}>{`Advanced tutorial`}</MDXTag></MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}