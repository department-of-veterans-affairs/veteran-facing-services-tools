(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"3dLD":function(e,n,a){"use strict";a.d(n,"a",(function(){return h}));var t=a("q1tI"),o=a.n(t),r=a("8FPV"),i=(a("gu/5"),a("eoYm"),a("v9g0"),a("pJf4"),a("Yk4M")),s=a("Wbzz");function m(){return o.a.createElement(s.StaticQuery,{query:"157057713",render:function(e){return o.a.createElement(p,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})},data:i})}function c(e){var n=e.item;return n.href?o.a.createElement("li",{key:n.name},o.a.createElement(s.Link,{to:n.href},n.name)):o.a.createElement("li",{key:n.name},n.name," (future)")}function p(e){var n=e.items,a=e.isSublist,t=void 0!==a&&a;return n.length?o.a.createElement("ul",{className:"site-c-sidenav-list"},n.map((function(e){return e.items?o.a.createElement("li",{key:e.name},t&&o.a.createElement(c,{item:e}),!t&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(p,{isSublist:!0,items:e.items})):"componentList"===e.query?o.a.createElement("li",{key:e.name},t&&o.a.createElement(c,{item:e}),!t&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(m,null)):o.a.createElement(c,{item:e,key:e.name})}))):null}var l=a("MEl4"),d=a.n(l);function u(e){var n=e.location,a=d.a.sections.find((function(e){return n.pathname.includes(e.href)}));return a?o.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},o.a.createElement("div",{className:"site-c-sidenav"},o.a.createElement(p,{items:a.items}))):null}function h(e){var n=e.children,a=e.location;return o.a.createElement(r.a,{location:a},o.a.createElement("div",{className:"vads-l-row"},o.a.createElement(u,{location:a}),o.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},n)))}},Yk4M:function(e){e.exports=JSON.parse('{"data":{"components":{"edges":[{"node":{"path":"/visual-design/components/accepttermsprompt/","context":{"source":"component","name":"AcceptTermsPrompt"}}},{"node":{"path":"/visual-design/components/additionalinfo/","context":{"source":"component","name":"AdditionalInfo"}}},{"node":{"path":"/visual-design/components/alertbox/","context":{"source":"component","name":"AlertBox"}}},{"node":{"path":"/visual-design/components/breadcrumbs/","context":{"source":"component","name":"Breadcrumbs"}}},{"node":{"path":"/visual-design/components/collapsiblepanel/","context":{"source":"component","name":"CollapsiblePanel"}}},{"node":{"path":"/visual-design/components/dropdownpanel/","context":{"source":"component","name":"DropDownPanel"}}},{"node":{"path":"/visual-design/components/errorablecheckbox/","context":{"source":"component","name":"ErrorableCheckbox"}}},{"node":{"path":"/visual-design/components/errorablecheckboxgroup/","context":{"source":"component","name":"ErrorableCheckboxGroup"}}},{"node":{"path":"/visual-design/components/errorabledate/","context":{"source":"component","name":"ErrorableDate"}}},{"node":{"path":"/visual-design/components/errorablefileinput/","context":{"source":"component","name":"ErrorableFileInput"}}},{"node":{"path":"/visual-design/components/errorablemonthyear/","context":{"source":"component","name":"ErrorableMonthYear"}}},{"node":{"path":"/visual-design/components/errorablenumberinput/","context":{"source":"component","name":"ErrorableNumberInput"}}},{"node":{"path":"/visual-design/components/errorableradiobuttons/","context":{"source":"component","name":"ErrorableRadioButtons"}}},{"node":{"path":"/visual-design/components/errorableselect/","context":{"source":"component","name":"ErrorableSelect"}}},{"node":{"path":"/visual-design/components/errorabletextarea/","context":{"source":"component","name":"ErrorableTextArea"}}},{"node":{"path":"/visual-design/components/errorabletextinput/","context":{"source":"component","name":"ErrorableTextInput"}}},{"node":{"path":"/visual-design/components/helpmenu/","context":{"source":"component","name":"HelpMenu"}}},{"node":{"path":"/visual-design/components/expandinggroup/","context":{"source":"component","name":"ExpandingGroup"}}},{"node":{"path":"/visual-design/components/iconbase/","context":{"source":"component","name":"IconBase"}}},{"node":{"path":"/visual-design/components/iconhelp/","context":{"source":"component","name":"IconHelp"}}},{"node":{"path":"/visual-design/components/iconsearch/","context":{"source":"component","name":"IconSearch"}}},{"node":{"path":"/visual-design/components/iconuser/","context":{"source":"component","name":"IconUser"}}},{"node":{"path":"/visual-design/components/loadingindicator/","context":{"source":"component","name":"LoadingIndicator"}}},{"node":{"path":"/visual-design/components/ombinfo/","context":{"source":"component","name":"OMBInfo"}}},{"node":{"path":"/visual-design/components/pagination/","context":{"source":"component","name":"Pagination"}}},{"node":{"path":"/visual-design/components/privacyagreement/","context":{"source":"component","name":"PrivacyAgreement"}}},{"node":{"path":"/visual-design/components/progressbar/","context":{"source":"component","name":"ProgressBar"}}},{"node":{"path":"/visual-design/components/progressbutton/","context":{"source":"component","name":"ProgressButton"}}},{"node":{"path":"/visual-design/components/promobanner/","context":{"source":"component","name":"PromoBanner"}}},{"node":{"path":"/visual-design/components/searchmenu/","context":{"source":"component","name":"SearchMenu"}}},{"node":{"path":"/visual-design/components/sortabletable/","context":{"source":"component","name":"SortableTable"}}},{"node":{"path":"/visual-design/components/segmentedprogressbar/","context":{"source":"component","name":"SegmentedProgressBar"}}},{"node":{"path":"/visual-design/components/systemdownview/","context":{"source":"component","name":"SystemDownView"}}},{"node":{"path":"/visual-design/components/modal/","context":{"source":"component","name":"Modal"}}},{"node":{"path":"/visual-design/components/megamenu/","context":{"source":"component","name":"MegaMenu"}}}]}}}')},eJvW:function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return m})),a.d(n,"_frontmatter",(function(){return c}));a("rzGZ"),a("Dq+y"),a("8npG"),a("Ggvi"),a("E5k/");var t=a("q1tI"),o=a.n(t),r=a("6qfE"),i=a("3dLD");var s={},m=function(e){var n,a;function t(n){var a;return(a=e.call(this,n)||this).layout=i.a,a}return a=e,(n=t).prototype=Object.create(a.prototype),n.prototype.constructor=n,n.__proto__=a,t.prototype.render=function(){var e=this.props,n=e.components,a=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",Layout:this.layout,layoutProps:Object.assign({},s,a),components:n},o.a.createElement("h1",{id:"about-the-schema-and-uischema-objects"},"About the schema and uiSchema objects"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The VA.gov Forms System lets you build web-based forms using the JSON Schema standard for form data and React for the form UI. The form data and UI are represented by ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"schema")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," objects, respectively, which are included in the form configuration file."),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#understanding-the-schema-object"}},"Understanding the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"schema")," object"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#describing-object-fields-and-arrays"}},"Describing object fields and arrays")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#understanding-the-uischema-object"}},"Understanding the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"uiSchema")," object"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#configuring-uischema-using-rjsf-options"}},"Configuring ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"uiSchema")," using RJSF options")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#configuring-uischema-using-vafs-options"}},"Configuring ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},"uiSchema")," using VAFS options"))))),o.a.createElement("h2",{id:"understanding-the-schema-object"},"Understanding the schema object"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The JSON Schema standard describes the allowed shape of JSON objects. Using a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"schema")," object, a JSON schema provides information about structured JSON data. For more information about the JSON Schema Standard, see ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://spacetelescope.github.io/understanding-json-schema/"}},"Understanding JSON Schema"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For JSON Schema validator libraries, VAFS uses ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://www.npmjs.com/package/ajv"}},"ajv")," for unit tests and ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://www.npmjs.com/package/jsonschema"}},"jsonschema")," in the VAFS code."),o.a.createElement("h3",{id:"describing-object-fields-and-arrays"},"Describing object fields and arrays"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This example describes a JSON document that is an object with one property called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"myField"),", which is a number, meaning ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"{ myField: 2 }")," would be valid:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"{\n  type: 'object',\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"However, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"{}")," is also valid. To require a property in an object, use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"required")," property, which takes an array of property names passed as strings. As in this example, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"required")," is always on the object that contains the field, not the field itself:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"{\n  type: 'object',\n  required: ['myField'],\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Arrays work similarly to objects. This example describes an array of boolean values: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"[true, false, true]"),". Items can be an object schema or any other type of schema as well:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"{\n  type: 'array',\n  items: {\n    type: 'boolean'\n  }\n}\n")),o.a.createElement("h2",{id:"understanding-the-uischema-object"},"Understanding the uiSchema object"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," object was introduced by ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#react-jsonschema-form"}},"react-jsonschema-form"),", or ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"RJSF"),", as a means of describing how a form page should be rendered from a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"schema"),". To generate a form, react-jsonschema-form steps through the schema depth and renders different React components based on the type of data each property in the schema represents. In VAFS, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," follows the format described in the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object"}},"react-jsonschema-form documentation"),", with some custom VAFS additions. The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"schema")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," objects should have a similar structure, with the same fields organized in the same way with these exceptions:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"uiSchema")," doesn't need to contain all the fields found in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"schema")," object."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"uiSchema")," doesn't need a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"properties")," object for sub-fields.")),o.a.createElement(r.MDXTag,{name:"p",components:n},"For example, given this schema:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"The matching ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," would be:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"{\n  'ui:title': 'My form',\n  field1: {\n    'ui:title': 'My field'\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"For array fields, you must specify an ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"items")," object that contains the fields for each row in the array in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," object:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"{\n  'ui:title': 'My form',\n  toursOfDuty: {\n    items: {\n      branchName: {\n        'ui:title': 'Branch'\n      }\n    }\n  }\n}\n")),o.a.createElement("h3",{id:"configuring-uischema-using-rjsf-options"},"Configuring uiSchema using RJSF options"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you're not already familiar with the RJSF uiSchema options, see the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object"}},"RJSF library documentation"),". Some commonly used options include:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#object-fields-ordering"}},"ui:order"),": An array of field names in the order in which they should appear."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#alternative-widgets"}},"ui:widget"),": The name of an alternative widget to use for the field, for example, a custom widget called ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"yesNo"),"."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#custom-field-components"}},"ui:field"),": The name of a custom field."),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/mozilla-services/react-jsonschema-form#custom-css-class-names"}},"classNames"),": The class names to put on the component.")),o.a.createElement("h3",{id:"configuring-uischema-using-vafs-options"},"Configuring uiSchema using VAFS options"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The VAFS code includes additional ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"uiSchema")," functionality not found in the RJSF library."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"{\n  // Used instead of the `title` property in the JSON Schema.\n  'ui:title': '',\n  // It can also be a component, which passes the current form data as a property.\n  'ui:title': ({ formData }) => <legend>{`A ${formData.thing} title`}</legend>,\n\n  // Used instead of the `description` property in the JSON Schema. This can be a string\n  // or a React component, and is normally used on object fields in the schema to provide\n  // description text or HTML before a block of fields.\n  'ui:description': '' || DescriptionComponent,\n\n  // Customizes the field or widget you're using.\n  'ui:field': '' || FieldComponent,\n  'ui:widget': '' || WidgetComponent,\n\n  // Renders string fields on the review page. Always used when you specify a custom widget\n  // component. Can also be used with regular widgets.\n  'ui:reviewWidget': WidgetComponent,\n\n  // Renders a custom review field on the review page. Only used when you specify a widget\n  // component. The `children` parameter is a component from the `'ui:reviewWidget'`, but\n  // is only rendered by this custom reviewField if the schema for it is not an `object`\n  // or `array`; NOTE: you must return a div with a \"review-row\" class name and include\n  // child <dt> and <dd> elements to maintain accessibility standards\n  'ui:reviewField': ({ children, schema, uiSchema }) => (\n    <div className=\"review-row\">\n      <dt>\n        {uiSchema['ui:title']}\n        {uiSchema['ui:description]}\n      </dt>\n      <dd>{children}</dd>\n    </div>\n  ),\n\n  // Provides a function to make a field conditionally required. The data in the whole form,\n  // with no page breaks, is the only parameter. Don't make a field required in the JSON\n  // schema and in addition to using `ui:required` on that field. The index argument is\n  // provided if you use `ui:required` on data inside an array.\n  'ui:required': function (formData, index) {\n    return true || false;\n  },\n\n  // An array of validation functions or objects that you can use to add validation that's\n  // not possible through JSON Schema. See below for the properties passed to the validation\n  // functions and how to use them.\n  'ui:validations': [\n    /**\n     * Note the difference between the three data parameters:\n     *\n     * @param {any} fieldData The data for the current field being validated\n     * @param {object} formData The data for all the fields in every page\n     */\n    function (errors, fieldData, formData, fieldSchema, errorMessages) {\n      errors.addError('My error');\n    },\n    {\n      validator: (errors, fieldData, formData, fieldSchema, errorMessages, options) => {\n        errors.addError('My other error');\n      },\n      options: {}\n    }\n  ],\n\n  // An object with field-specific error messages. Structured by error name (from JSON Schema\n  // error types). This is passed to custom validations in `ui:validations` in order to allow\n  // configurable error messages in a validator.\n  'ui:errorMessages': {\n    'pattern': 'Please provide a value in the right format'\n  },\n  'ui:options': {\n\n    // An map of enum values to labels that are shown by the select and radio widgets.\n    labels: {\n      chapter30: 'A readable description (Chapter 30)'\n    },\n\n    // A map of values to a component, text, or JSX\n    // (https://reactjs.org/docs/introducing-jsx.html). If your field is a radio widget, the\n    // content here is shown underneath the radio button for that value when it's selected.\n    nestedContent: {\n      'value': <p>Some text</p>\n    },\n\n    // A string of class names that are added to the widget for the current field.\n    // `widgetClassNames` is similar to the default `classNames` property, but it puts the\n    // class names on the input/select/etc element itself, rather than a surrounding `div`.\n    widgetClassNames: '',\n\n    // For array fields, this component is shown when the item in the array is rendered as\n    // read-only on a page that is not a review page.\n    viewField: RowViewComponent,\n\n    // To show a field only when another field is true, set this option to the property name.\n    // It wraps the fields with an ExpandingGroup component using the `expandUnder` field as\n    // the first question.\n    expandUnder: '',\n\n    // To match to a specific value, use the `expandUnderCondition` option to specify the\n    // value that the `expandUnder` field's data should equal.\n    expandUnderCondition: 'someValue',\n    // `expandUnderCondition` can also be a function that receives the data from the\n    // `expandUnder` field as an argument.\n    expandUnderCondition: (field) => field === 'someValue' || field === 'someOtherValue',\n\n    // When using the expandUnder option, you can set `expandUnderClassNames` on the field\n    // specified by `expandUnder` and it will add classes to the `div` that wraps all of the\n    // fields when they're expanded. See cookbook for an example use case.\n    expandUnderClassNames: '',\n\n    // Hides the specified field on the review page.\n    hideOnReview: true || false,\n\n    // Hides the specified field on the review page when the field value is `false`.\n    hideOnReviewIfFalse: true || false,\n\n    // Hide review row entry if the form value is an empty string, null or undefined\n    // This option is ignored if there is a custom `'ui:reviewField'` defined\n    hideEmptyValueInReview: true || false,\n\n    // Hides label added before the widget\n    hideLabelText: true || false,\n\n    // use label or legend (inside fieldset)\n    showFieldLabel: 'label', // vs anything other than 'label'\n\n    // A function that conditionally hides fields in the form. `hideIf` provides the `index`\n    // argument when you use `ui:required` on data inside an array.\n    hideIf: function (formData, index) {\n      return true || false;\n    },\n\n    // A function that conditionally replaces the current field's schema. `updateSchema`\n    // provides the `index` argument when you use `ui:required` on data inside an array.\n    updateSchema: function (formData, schema, uiSchema, index, pathToCurrentData) {\n      // This function returns an object with the properties you want to update. Instead of\n      // replacing the existing schema, it updates the individual properties.\n      return {\n        type: 'string'\n      };\n    },\n\n    // By default, array fields that are displayed on a single page in a form, such as\n    // information for multiple dependents, are displayed in a separate section on the\n    // review page. To keep the information in a single section on a review page, set\n    // this property to `true`.\n    keepInPageOnReview: true\n  }\n}\n")))},t}(o.a.Component),c={}}}]);
//# sourceMappingURL=component---src-pages-forms-about-the-schema-and-uischema-objects-mdx-2c8cc6fd07ea78d1ab5f.js.map