{"componentChunkName":"component---src-layouts-module-components-js","path":"/visual-design/components/breadcrumbs/","result":{"data":{"mdx":{"id":"161f282b-6c12-5c1d-b9f1-da08698586f0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Breadcrumbs\",\n  \"name\": \"Breadcrumbs\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"intent\"\n  }, \"Intent\"), mdx(\"p\", null, \"Breadcrumbs are intended to provide users an understanding of where they are located in a rich information structure. They work well in situations where users may have clicked several layers deep, and would want to move back toward the top in linear steps.\"), mdx(\"h2\", {\n    \"id\": \"using-the-breadcrumbs-component\"\n  }, \"Using the Breadcrumbs Component\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadrumbs />\"), \" component accepts a number of different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" props and will render them correctly:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An array of comma-separated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a>\"), \" tags\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An array of comma-separated \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Link />\"), \" components (React router)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hard-coded HTML \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a>\"), \" tags\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A combination of HTML and React router components\")), mdx(\"p\", null, \"You do not need to wrap your code in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" elements. The proper markup is included in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component and will be output when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render()\"), \" method is executed.\"), mdx(\"h2\", {\n    \"id\": \"mobile-width-adaptation\"\n  }, \"Mobile Width Adaptation\"), mdx(\"p\", null, \"The breadcrumb component switches to a single previous step link when the screen is collapsed or zoomed smaller than 481 device pixels or a custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.mobileWidth\"), \" declaration. This adaptation is designed to minizime the breadcrumb's footprint on smaller screens and is beneficial for sites with many layers.\"), mdx(\"h2\", {\n    \"id\": \"optional-props\"\n  }, \"Optional Props\"), mdx(\"h3\", {\n    \"id\": \"arialabel-string\"\n  }, \"ariaLabel (STRING)\"), mdx(\"p\", null, \"Passing prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ariaLabel=\\\"<STRING>\\\"\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component will override the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label=\\\"Breadcrumb\\\"\"), \" declaration. If you plan to add a unique aria-label, please consider testing with one or more assistive devices to ensure proper context.\"), mdx(\"h3\", {\n    \"id\": \"classname-string\"\n  }, \"className (STRING)\"), mdx(\"p\", null, \"Passing prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className=\\\"<STRING STRING>\\\"\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component will append your space-separated classes to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav class=\\\"va-nav-breadcrumbs\\\">\"), \" class list.\"), mdx(\"h3\", {\n    \"id\": \"id-string\"\n  }, \"id (STRING)\"), mdx(\"p\", null, \"Passing prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id=\\\"<STRING>\\\"\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component will append that ID to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" element. If no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" is passed, a unique id will be created by concatnating the string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"va-breadcrumbs-\"), \" with a string returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lodash.uniqueid\"), \".\"), mdx(\"h3\", {\n    \"id\": \"listid-string\"\n  }, \"listId (STRING)\"), mdx(\"p\", null, \"Passing prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listId=\\\"<STRING>\\\"\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component will append that list ID to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" element. If no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listId\"), \" is passed, a unique id will be created by concatnating the string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"va-breadcrumbs-list-\"), \" with a string returned by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lodash.uniqueid\"), \".\"), mdx(\"h3\", {\n    \"id\": \"mobilefirst-boolean\"\n  }, \"mobileFirst (BOOLEAN)\"), mdx(\"p\", null, \"Passing prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mobileFirstProp\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component will add a class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"va-nav-breadcrumbs--mobile\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" element, and hide all breadcrumb links except the previous step. This prop could be used in cases where developers want absolute control over which breadcrumb UI to show, instead of letting the user's viewport width toggle the correct view.\"), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component has been tested for accessibility. It is fully keyboard accessible, and announces the current page correctly in the following screen reader combinations:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MacOS + Safari + VoiceOver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MacOS + Chrome + VoiceOver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"iOS + Safari + VoiceOver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows 7/10 + Firefox + NVDA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows 10 + Chrome + NVDA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows 7/10 + IE11 + JAWS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows 10 + Chrome + JAWS\")), mdx(\"h3\", {\n    \"id\": \"aria-label-attribute\"\n  }, \"aria-label (ATTRIBUTE)\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component automatically adds an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label=\\\"Breadcrumb\\\"\"), \" attribute to the containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" element. This will be read out as \\\"Breadcrumb\\\" to assistive devices like JAWS, NVDA, and VoiceOver. The label can be changed to fit your needs by passing a custom string to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ariaLabel\"), \" prop.\"), mdx(\"h3\", {\n    \"id\": \"aria-current-attribute\"\n  }, \"aria-current (ATTRIBUTE)\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Breadcrumbs />\"), \" component automatically adds an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-current=\\\"page\\\"\"), \" attribute to the last link rendered by the full breadcrumb list. This attribute triggers an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a[aria-current=\\\"page\\\"]\"), \" CSS selector, makes the link bold, removes the underline, and changes it to a black text color. Current \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/breadcrumb/index.html\"\n  }), \"WAI-ARIA authoring practices\"), \" recommend this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-current=\\\"page\\\"\"), \" attribute for screen reader context.\"), mdx(\"h3\", {\n    \"id\": \"code\"\n  }, \"Code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import Breadcrumbs from '@department-of-veterans-affairs/formation-react/Breadcrumbs';\\n\\n<Breadcrumbs>\\n  {[\\n    <a href=\\\"#\\\" key=\\\"1\\\">Home</a>,\\n    <a href=\\\"#\\\" key=\\\"2\\\">Level One</a>,\\n    <a href=\\\"#\\\" key=\\\"3\\\">Level Two</a>\\n  ]}\\n</Breadcrumbs>\\n\")), mdx(\"h3\", {\n    \"id\": \"rendered-component\"\n  }, \"Rendered Component\"), mdx(\"div\", {\n    className: \"site-c-reactcomp__rendered\"\n  }, mdx(Breadcrumbs, {\n    mdxType: \"Breadcrumbs\"\n  }, [mdx(\"a\", {\n    href: \"#\",\n    key: \"1\"\n  }, \"Home\"), mdx(\"a\", {\n    href: \"#\",\n    key: \"2\"\n  }, \"Level One\"), mdx(\"a\", {\n    href: \"#\",\n    key: \"3\"\n  }, \"Level Two\")])));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#intent","title":"Intent"},{"url":"#using-the-breadcrumbs-component","title":"Using the Breadcrumbs Component"},{"url":"#mobile-width-adaptation","title":"Mobile Width Adaptation"},{"url":"#optional-props","title":"Optional Props","items":[{"url":"#arialabel-string","title":"ariaLabel (STRING)"},{"url":"#classname-string","title":"className (STRING)"},{"url":"#id-string","title":"id (STRING)"},{"url":"#listid-string","title":"listId (STRING)"},{"url":"#mobilefirst-boolean","title":"mobileFirst (BOOLEAN)"}]},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria-label-attribute","title":"aria-label (ATTRIBUTE)"},{"url":"#aria-current-attribute","title":"aria-current (ATTRIBUTE)"},{"url":"#code","title":"Code:"},{"url":"#rendered-component","title":"Rendered Component"}]}]}},"componentMetadata":{"id":"87fc97b5-57c0-5b22-b462-4dc89dee8940","displayName":"Breadcrumbs","docblock":"React component to dynamically build breadcrumb links.\nThe Breadcrumbs component accepts an array of HTML A tags,\nReact Router LINK components, or a combination of the two.\nThe component also accepts hard-coded A or LINK elements\nas props.children.","doclets":[],"childrenComponentProp":[{"name":"ariaLabel","docblock":"Adds an aria-label attribute to the <nav /> element.\nThe aria-label will be read out when users navigate the\n<Breadcrumbs/> component using a screen reader.","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":{"value":"'Breadcrumb'","computed":false}},{"name":"className","docblock":"Optionally adds one or more CSS classes to the NAV element","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"id","docblock":"Adds a custom id attribute to the NAV element","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"listId","docblock":"Adds a custom id attribute to the UL element","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"mobileFirstProp","docblock":"Adds CSS class `.va-nav-breadcrumbs--mobile` to the\nNAV element. The mobile breadcrumb will always\nbe displayed while mobileFirstProp is True.","required":false,"parentType":{"name":"bool"},"type":{"value":null},"defaultValue":null}],"composes":null}},"pageContext":{"id":"161f282b-6c12-5c1d-b9f1-da08698586f0","source":"component","frontmatter":{"name":"Breadcrumbs","tags":null,"title":"Breadcrumbs"},"name":"Breadcrumbs"}},"staticQueryHashes":["2744294623","3649515864","4193446859","4277382034"]}