{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/components/EditLink.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/forms/creating-custom-fields-and-widgets.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["SidebarItem","item","href","key","name","to","SidebarItems","items","isSublist","length","className","map","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","EditLink","sourceUrl","class","aria-hidden","SidebarLayout","children","pageContext","Layout","id","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-forms-creating-custom-fields-and-widgets-mdx-8bba3a157939297acbcf.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\n\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function EditLink({ sourceUrl }) {\n  return sourceUrl ? (\n    <div>\n      <i class=\"fa fa-edit\" aria-hidden=\"true\" />{' '}\n      <a href={sourceUrl}>Edit this page on GitHub</a>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport EditLink from '../components/EditLink';\nimport Layout from './Layout';\n\n/**\n * SidebarLayout\n *\n * @class SidebarLayout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location, pageContext }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <EditLink sourceUrl={pageContext.sourceUrl} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-custom-fields-and-widgets\"\n    }}>{`Creating custom fields and widgets`}</h1>\n    <p>{`You can customize the base library to satisfy the unique requirements of your particular form.`}</p>\n    <h2 {...{\n      \"id\": \"in-this-guide\"\n    }}>{`In this guide`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#how-vafs-uses-rjsf\"\n        }}>{`How the VAFS uses RJSF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#customizing-fields-and-widgets-from-rjsf\"\n        }}>{`Customizing fields, widgets, and events from RJSF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#supporting-multi-page-forms\"\n        }}>{`Supporting multi-page forms`}</a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"how-vafs-uses-rjsf\"\n    }}>{`How VAFS uses RJSF`}</h3>\n    <p>{`The VAFS code uses react-jsonschema-form, or RJSF, to render form fields, but it builds a scaffolding on top of it to support multi-page forms and common form patterns. Additionally, VAFS uses RJSF to create a form configuration spec that allows developers to specify the structure of a multi-page form.`}</p>\n    <h3 {...{\n      \"id\": \"customizing-fields-widgets-and-events-from-rjsf\"\n    }}>{`Customizing fields, widgets, and events from RJSF`}</h3>\n    <p>{`RJSF passes all field and widget components to `}<inlineCode parentName=\"p\">{`SchemaField`}</inlineCode>{` (and most other components) as a `}<inlineCode parentName=\"p\">{`registry`}</inlineCode>{` property. To override fields and widgets in the registry, pass components of the same name into the library's main `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component. The VAFS uses custom versions of these components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ObjectField`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ArrayField`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`FieldTemplate`}</inlineCode></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#textwidget\"\n        }}>{`TextWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#selectwidget\"\n        }}>{`SelectWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#emailwidget\"\n        }}>{`EmailWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#checkboxwidget\"\n        }}>{`CheckboxWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#radiowidget\"\n        }}>{`RadioWidget`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TextareaWidget`}</inlineCode></li>\n    </ul>\n    <p>{`The VAFS uses these custom fields and widgets:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#yesnowidget\"\n        }}>{`YesNoWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#datewidget\"\n        }}>{`DateWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#ssnwidget\"\n        }}>{`SSNWidget`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./available-widgets#phonenumberwidget\"\n        }}>{`PhoneNumberWidget`}</a></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"custom-widget-and-field-interface\"\n    }}>{`Custom widget and field interface`}</h4>\n    <p>{`Writing custom widgets is similar to writing React components: A value is passed in, and an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` hook is provided for changing data. Other properties like the schemas and field ID are also provided.`}</p>\n    <p>{`These are the properties passed to all custom widget components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`: Boolean for if the field has been disabled through the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formContext`}</inlineCode>{`: The form context object from RJSF`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode>{`: The string id for the particular field being used`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`label`}</inlineCode>{`: The label text for the field, typically the title from the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{`: Function that will save data entered in the widget into your form data`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onBlur`}</inlineCode>{`: Function that marks the field as \"blurred,\" which will reveal any validation errors for that field `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{`: The `}<inlineCode parentName=\"li\">{`ui:options`}</inlineCode>{` object from `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{`, if present`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options.enumOptions`}</inlineCode>{`: An array of enum options and their names, if present in the schema, inserted into `}<inlineCode parentName=\"li\">{`options`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`readonly`}</inlineCode>{`: If the field is marked `}<inlineCode parentName=\"li\">{`readonly`}</inlineCode>{` in the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry`}</inlineCode>{`: The registry of field and widgets, generally used by fields to choose the right component to use`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`required`}</inlineCode>{`: If the field is required or not via the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: The form data for the current property`}</li>\n    </ul>\n    <p>{`Widgets are typically meant for input type components where data is saved to a single property in your form data. The props they receive are derived the more broad props of field components. These are the props passed to field components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`: Boolean for if the field has been disabled through the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formContext`}</inlineCode>{`: The form context object from RJSF`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`formData`}</inlineCode>{`: The form data for the current property`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`idSchema`}</inlineCode>{`: An object with ids for the current property and any sub properties. The `}<inlineCode parentName=\"li\">{`$id`}</inlineCode>{` property has the id for the current property`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: The name of the current property, from `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{`: Function that will save data entered in the widget into your form data`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onBlur`}</inlineCode>{`: Function that marks the field as \"blurred,\" which will reveal any validation errors for that field `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`readonly`}</inlineCode>{`: If the field is marked `}<inlineCode parentName=\"li\">{`readonly`}</inlineCode>{` in the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry`}</inlineCode>{`: The registry of field and widgets, generally used by fields to choose the right component to use`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`required`}</inlineCode>{`: If the field is required or not via the schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{`: The `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{` object for the current property`}</li>\n    </ul>\n    <p>{`The main differences are the inclusion of `}<inlineCode parentName=\"p\">{`idSchema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`, which along with `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` allow full access to configuration info for a particular property in your form config.`}</p>\n    <p>{`In addition to customizing fields and widgets, the VAFS code hooks into a number of events provided by `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` to support our form patterns, found in the `}<inlineCode parentName=\"p\">{`FormPage`}</inlineCode>{` component. These events are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`validate`}</inlineCode>{`: This event is called when validation occurs. We call our custom validation, which reads uiSchema for custom validation hooks that have been included for form fields outside of what JSON Schema provides.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`transformErrors`}</inlineCode>{`: This event is provided when the VAFS receives the list of JSON Schema validation errors and can return a transformed list. It replaces the messages with a set of default messages, as well as any messages provided for specific fields in uiSchema. It also moves the errors for required fields from the object level to the field level. Because JSON Schema specifies required fields with a `}<inlineCode parentName=\"li\">{`required`}</inlineCode>{` array on an object field schema, any errors about missing data are associated with that object and moved so they're associated with the missing field and rendered with that field on the form.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onError`}</inlineCode>{`: This event is called if a user tries to submit a form with a validation error. The VAFS sets a `}<inlineCode parentName=\"li\">{`submitted`}</inlineCode>{` flag in `}<inlineCode parentName=\"li\">{`formContext`}</inlineCode>{`, which is an object passed to all fields and components in the RJSF form. The `}<inlineCode parentName=\"li\">{`FieldTemplate`}</inlineCode>{` component uses `}<inlineCode parentName=\"li\">{`formContext`}</inlineCode>{` to display all error messages to the user.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onSubmit`}</inlineCode>{`: This event is called when a user submits a form with no validation errors. When this happens, the VAFS code looks for the next page in the multi-page form and navigates to it.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange`}</inlineCode>{`: This event is called when a user changes data in the form. The VAFS fires a Redux action and updates the store with the new data. The reducer code does several recalculations:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recalculate the required fields for the schema:`}</strong>{` You can specify functions in uiSchema that set fields as optional or required based on form data. This runs them and updates the schema.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recalculate which schema fields are hidden and remove that data:`}</strong>{` In uiSchema, you can specify fields that are conditionally hidden based on user data. To avoid validation errors from data a user can't see, the VAFS updates the schema to add a `}<inlineCode parentName=\"li\">{`ui:hidden`}</inlineCode>{` property and remove any user data for those fields.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recalcuate general schema updates:`}</strong>{` Because you can make arbitrary changes to the schema based on form data, the VAFS must also make those changes, for example, removing options in an `}<inlineCode parentName=\"li\">{`enum`}</inlineCode>{` array when a user has entered certain data.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"supporting-multi-page-forms\"\n    }}>{`Supporting multi-page forms`}</h3>\n    <p>{`Large forms are organized into `}<em parentName=\"p\">{`chapters`}</em>{` and `}<em parentName=\"p\">{`pages`}</em>{`. A chapter is a collection of pages, each rendered as a single RJSF form with a schema and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` field component. The chapter and page organization is described in a form config file that the VAFS uses to generate a list of routes. A user can move through the list of pages until they reach the review page.`}</p>\n    <p>{`The review page also takes the config file and renders each chapter in an accordion panel. Inside a panel, the VAFS uses RJSF to render each page in a read-only view. This view uses simplified widgets and a different `}<inlineCode parentName=\"p\">{`FieldTemplate`}</inlineCode>{` component to render each form field in a definition list. The read-only view uses the RJSF `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component with no input elements, rendering instead with text. When a user on the review page clicks Edit for a form page, the normal widgets are used and a normal form is rendered.`}</p>\n    <p>{`Each array item on a review page is rendered as read-only, and individual items can be edited independently. To accomplish this, the review `}<inlineCode parentName=\"p\">{`ArrayField`}</inlineCode>{` component renders each item in the array as its own RJSF `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{`. In addition, array fields are taken from the page's read-only view and rendered separately.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}