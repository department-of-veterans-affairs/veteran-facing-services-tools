{"version":3,"sources":["webpack:///./src/components/EditLink.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/pages/getting-started/common-tasks/new-unit-test.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["EditLink","sourceUrl","class","aria-hidden","href","SidebarLayout","children","location","pageContext","Layout","className","Sidebar","id","SidebarItem","item","key","name","to","SidebarItems","items","isSublist","length","map","sidebarSection","sidebarData","sections","find","section","pathname","includes","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-getting-started-common-tasks-new-unit-test-mdx-671de28824316ef0f756.js","sourcesContent":["import React from 'react';\n\nexport default function EditLink({ sourceUrl }) {\n  return sourceUrl ? (\n    <div>\n      <i class=\"fa fa-edit\" aria-hidden=\"true\" />{' '}\n      <a href={sourceUrl}>Edit this page on GitHub</a>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport EditLink from '../components/EditLink';\nimport Layout from './Layout';\n\n/**\n * SidebarLayout\n *\n * @class SidebarLayout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location, pageContext }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row site-l-wrapper\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <EditLink sourceUrl={pageContext.sourceUrl} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\n\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-a-unit-test\"\n    }}>{`Writing a unit test`}</h1>\n    <p>{`All new code that is added to `}<inlineCode parentName=\"p\">{`vets-website`}</inlineCode>{` should be unit tested and unit tests should cover at least 75% of code paths. Write unit tests as you build to make sure your form (or other component) is behaving as you expect and to help guard against future bugs.\nFor example, you might create a unit test file for each page in a form and then test the following scenarios:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The correct number of inputs show up when you render the page.`}</li>\n      <li parentName=\"ul\">{`The correct number of fields display validation errors if you submit without entering any information.`}</li>\n      <li parentName=\"ul\">{`Any conditional logic on the page displays under the correct conditions.`}</li>\n    </ul>\n    <p>{`For more detailed information about unit test best practices and an in-depth discussion of how they apply to `}<inlineCode parentName=\"p\">{`vets-website`}</inlineCode>{`, please view this recording of `}<a parentName=\"p\" {...{\n        \"href\": \"https://youtu.be/8Y0cuMUoWAw\"\n      }}>{`Front End Unit Tests on VA.gov - Best Practices/Q&A Brown Bag Training`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"unit-test-overview\"\n    }}>{`Unit test overview`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`vets-website`}</inlineCode>{` repo uses:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://mochajs.org/\"\n            }}>{`Mocha`}</a>{` for running unit tests`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"http://chaijs.com/\"\n            }}>{`Chai`}</a>{` for test assertions`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n            }}>{`React Testing Library (RTL)`}</a>{` and `}<a parentName=\"li\" {...{\n              \"href\": \"https://airbnb.io/enzyme/\"\n            }}>{`Enzyme`}</a>{` for mounting and inspecting React components`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`We encourage the use of React Testing Library in place of Enzyme. `}{`[See the migration docs]`}{` (`}<a parentName=\"li\" {...{\n                  \"href\": \"https://testing-library.com/docs/react-testing-library/migrate-from-enzyme\"\n                }}>{`https://testing-library.com/docs/react-testing-library/migrate-from-enzyme`}</a>{`).`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://sinonjs.org/\"\n            }}>{`Sinon`}</a>{` for stubs and spies`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Unit tests are `}<strong parentName=\"li\">{`collocated with the application folder`}</strong>{` in a test directory that matches the application directory structure:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`- 📂 src\n  - 📂 my-application\n    - 📂 components\n      - MyComponent.jsx\n    - 📂 tests\n      - 📂 components\n        - MyComponent.unit.spec.jsx\n`}</code></pre>\n    <p>{`Mocha runs any `}<em parentName=\"p\">{`file_name`}</em>{`.unit.spec.js file located in the `}<inlineCode parentName=\"p\">{`/src`}</inlineCode>{` folder. This file is usually located in a test directory close to the code being tested.\n`}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/common-tasks/test\"\n      }}>{`Run the test`}</a>{` locally through npm script commands, during the Jenkins build (Unit), and after merging to master.`}</p>\n    <h2 {...{\n      \"id\": \"unit-test-conventions\"\n    }}>{`Unit test conventions`}</h2>\n    <p>{`Use the following conventions when writing a unit test.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { expect } from 'chai';\nimport { render } from '@testing-library/react';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('my-application', () => {\n  describe('MyComponent', () => {\n    it('renders privacy act disclosure when \"show\" is true', () => {\n        const screen = render(<MyComponent show />);\n        expect(screen.getByRole('heading')).to.have.text('Privacy Act Disclosure');\n    });\n  });\n});\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`describe`}</inlineCode>{` to organize tests by application and feature. Two levels should be adequate depending on the size of the application being tested. Try to avoid nesting deeper than two levels.`}</li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`it`}</inlineCode>{` to describe the unit test:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use active voice.`}</li>\n          <li parentName=\"ul\">{`Describe the behavior in terms specific to the unit.`}</li>\n          <li parentName=\"ul\">{`Do not abstract the test description with business logic.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recommended`}</strong>{`:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`it('truncates the address property when it is longer than 15 characters')`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`it('renders an error when props.errors contains at least one item')`}</inlineCode></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Not recommended`}</strong>{`:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`it('shortens the address when the user has a long address')`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`it('shows an error when the user is not logged in')`}</inlineCode></li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"testing-components\"\n    }}>{`Testing components`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<a parentName=\"p\" {...{\n            \"href\": \"https://testing-library.com/docs/react-testing-library/api/#render\"\n          }}>{`React Testing Library's `}<inlineCode parentName=\"a\">{`render`}</inlineCode>{` function`}</a>{` when testing components.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`import React from 'react';\nimport { render } from '@testing-library/react';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('MyComponent', () => {\n  it('renders', () => {\n    ...\n    render(<MyComponent />);\n    ...\n  });\n});\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you're using Enzyme, use `}<a parentName=\"p\" {...{\n            \"href\": \"https://airbnb.io/enzyme/docs/api/shallow.html\"\n          }}>{`shallow`}</a>{` instead of `}<a parentName=\"p\" {...{\n            \"href\": \"https://airbnb.io/enzyme/docs/api/mount.html\"\n          }}>{`mount`}</a>{` when possible to test components.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Always `}<inlineCode parentName=\"li\">{`unmount`}</inlineCode>{` components at the end of the test.`}</li>\n        </ul>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`import React from 'react';\nimport { mount } from 'enzyme';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('MyComponent', () => {\n  it('renders', () => {\n    ...\n    const form = mount(<MyComponent />);\n    ...\n    form.unmount();\n  });\n});\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"unit-tests-for-forms-pages\"\n    }}>{`Unit tests for forms pages`}</h2>\n    <p>{`Use the following guidelines when writing a unit test for forms pages.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { expect } from 'chai';\nimport { render } from '@testing-library/react';\nimport { DefinitionTester } from 'platform/testing/unit/schemaform-utils';\n\ndescribe('MyForm FormID', () => {\n  const {\n    schema,\n    uiSchema,\n    arrayPath,\n  } = formConfig.chapters.myFormChapter.pages.myFormPage;\n  it('renders myFormPage form', () => {\n    const screen = render(\n      <DefinitionTester\n        arrayPath={arrayPath}\n        pagePerItemIndex={0}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={initialData}\n        formData={initialData}\n        uiSchema={uiSchema}\n      />,\n    );\n    expect(screen.queryAllByRole('combobox')).to.equal(6); // from/to months, days; country, state\n    expect(screen.queryAllByRole('textbox')).to.equal(4); // facility name, from/to years, city\n  });\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Organize forms config tests by page.`}</li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`<DefinitionTester />`}</inlineCode>{` to render form configs for testing.`}</li>\n      <li parentName=\"ul\">{`Test at least the following:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Number of each type of input is rendered (example above)`}</li>\n          <li parentName=\"ul\">{`Any conditional display logic on the page`}</li>\n          <li parentName=\"ul\">{`All field level validation errors`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`When working with Enzyme, you can use the other `}<inlineCode parentName=\"p\">{`schemaform-utils`}</inlineCode>{` for filling out form data:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fillData()`}</inlineCode>{` - Enzyme helper that fires a change event with a value for an element at the given selector`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`fillData(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  'USA', // value\n);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fillDate()`}</inlineCode>{` - Enzyme helper that fills in a date field with data from the given date string`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`fillDate(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  '1950-1-3', // value\n);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`selectCheckbox()`}</inlineCode>{` - Enzyme helper that fires a change event with a value for a checkbox at the given name`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-unit-tests---react-testing-library\"\n    }}>{`Example unit tests - React Testing Library`}</h2>\n    <p>{`We recommend using `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n      }}>{`React Testing Library`}</a>{` for all your unit/integration testing needs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// SimpleLoginForm.js\nimport React from 'react';\n\nconst SimpleLoginForm = ({ onSubmit }) => {\n  const [error, setError] = React.useState('');\n  function handleSubmit(event) {\n    event.preventDefault();\n    const {\n      usernameInput: { value: username },\n      passwordInput: { value: password },\n    } = event.target.elements;\n    if (!username) {\n      setError('username is required');\n    } else if (!password) {\n      setError('password is required');\n    } else {\n      setError('');\n      onSubmit({ username, password });\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"usernameInput\">Username</label>\n          <input id=\"usernameInput\" />\n        </div>\n        <div>\n          <label htmlFor=\"passwordInput\">Password</label>\n          <input id=\"passwordInput\" type=\"password\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {error ? <div role=\"alert\">{error}</div> : null}\n    </div>\n  );\n};\nexport default SimpleLoginForm;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// SimpleLoginForm.unit.spec.jsx\nimport React from 'react';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport SimpleLoginForm from '../../components/SimpleLoginForm';\n\ndescribe('my-application', () => {\n  describe('SimpleLoginForm', () => {\n    it('calls onSubmit with the username and password when submit is clicked', () => {\n        const handleSubmit = sinon.spy();\n        const screen = render(<SimpleLoginForm onSubmit={handleSubmit} />); // alternatively \\`const { getByLabelText, getByText } = render(<SimpleLoginForm onSubmit={handleSubmit} />);\\`\n        const user = { username: 'user123', password: 'password123' };\n\n        userEvent.type(screen.getByLabelText(/username/i), user.username);\n        userEvent.type(screen.getByLabelText(/password/i), user.password);\n        userEvent.click(getByText(/submit/i));\n\n        expect(handleSubmit.callCount).to.equal(1); // alternatively \\`expect(handleSubmit.calledOnce).to.be.true()\\` works as well\n        expect(handleSubmit.calledWith(user)).to.be.true(); // for more explicit testing we can use \\`calledWithExactly\\` in place of \\`calledWith\\`\n    });\n  });\n});\n`}</code></pre>\n    <p>{`We have written a \"happy path\" test for a `}<inlineCode parentName=\"p\">{`SimpleLoginForm`}</inlineCode>{` component. Let's break down this test.`}</p>\n    <h3 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`...\nconst handleSubmit = sinon.spy();\nconst screen = render(<SimpleLoginForm onSubmit={handleSubmit} />);\nconst user = { username: 'user123', password: 'password123' };\n...\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`We mock the `}<inlineCode parentName=\"li\">{`handleSubmit`}</inlineCode>{` function.`}</li>\n      <li parentName=\"ol\">{`We instantiate the `}<inlineCode parentName=\"li\">{`SimpleLoginForm`}</inlineCode>{` component, passing in the mocked `}<inlineCode parentName=\"li\">{`handleSubmit`}</inlineCode>{` as a prop.`}</li>\n      <li parentName=\"ol\">{`We use the `}<inlineCode parentName=\"li\">{`render`}</inlineCode>{` function from RTL to produce actual DOM nodes.`}</li>\n      <li parentName=\"ol\">{`We get our `}<inlineCode parentName=\"li\">{`screen`}</inlineCode>{` utility from the return value of `}<inlineCode parentName=\"li\">{`render`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`We define the user data for reuse later in the test.`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` In this example we gained access to our query functions through the return value from `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`. The global named `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/queries/about#screen\"\n      }}><inlineCode parentName=\"a\">{`screen`}</inlineCode></a>{` import currently does not work in our test environment. Alternatively, you can destructure the return value to gain direct access to the RTL query functions.`}</p>\n    <h3 {...{\n      \"id\": \"dom-interactions-and-queries\"\n    }}>{`DOM Interactions and Queries`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`...\nuserEvent.type(screen.getByLabelText(/username/i), user.username);\nuserEvent.type(screen.getByLabelText(/password/i), user.password);\nuserEvent.click(getByText(/submit/i));\n...\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Unit tests should be isolated`}</li>\n      <li parentName=\"ul\">{`Components should use a unique label and text for each test.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` We can use the query functions that we destructured from `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` to find the input elements in our component by their label text. `}<inlineCode parentName=\"p\">{`Testing Library`}</inlineCode>{` provides a utility called `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/ecosystem-user-event/\"\n      }}>{`userEvent`}</a>{` that allows us to interact with the DOM nodes. We leverage the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` interaction to enter our username and password into each respective field, then the `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` function to submit after querying with the submit button text.`}</p>\n    <h3 {...{\n      \"id\": \"assertions\"\n    }}>{`Assertions`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`...\nexpect(handleSubmit.callCount).to.equal(1); // alternatively \\`expect(handleSubmit.calledOnce).to.be.true()\\` works as well\nexpect(handleSubmit.calledWith(user)).to.be.true(); // for more explicit testing we can use \\`calledWithExactly\\` in place of \\`calledWith\\`\n...\n`}</code></pre>\n    <p>{`To conclude this test we need to check that our `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` function fired and received the correct data.`}</p>\n    <h2 {...{\n      \"id\": \"example-unit-tests---enzyme\"\n    }}>{`Example unit tests - Enzyme`}</h2>\n    <p>{`VSP provides helper utilities to make writing tests easier. The following example unit tests illustrate some of these helpers. You can find these unit tests in the `}<inlineCode parentName=\"p\">{`vets-website`}</inlineCode>{` repo in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/master/src/applications/vic-v2/tests/config/veteranInformation.unit.spec.jsx\"\n      }}>{`veteranInformation.unit.spec.jsx`}</a>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { mount } from 'enzyme';\nimport { DefinitionTester, fillData, selectRadio, fillDate } from '../../../../platform/testing/unit/schemaform-utils.jsx';\nimport formConfig from '../config/form.js';\n\ndescribe('VIC veteran information', () => {\n  const { schema, uiSchema } = formConfig.chapters.veteranInformation.pages.veteranInformation;\n  it('should render', () => {\n    const form = mount(\n      <DefinitionTester\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    expect(form.find('input').length).to.equal(7);\n    expect(form.find('select').length).to.equal(4);\n    form.unmount();\n  });\n  ...\n});\n`}</code></pre>\n    <p>{`Helpers are imported from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/master/src/platform/testing/unit/schemaform-utils.jsx\"\n      }}><inlineCode parentName=\"a\">{`schemaform-utils.jsx`}</inlineCode></a>{`. The `}<inlineCode parentName=\"p\">{`DefinitionTester`}</inlineCode>{` is a component you can use to simulate a page being rendered without having to set up a whole form application with all the dependencies.\nThis example uses `}<a parentName=\"p\" {...{\n        \"href\": \"http://airbnb.io/enzyme/\"\n      }}>{`Enzyme`}</a>{` and mounts a `}<inlineCode parentName=\"p\">{`DefinitionTester`}</inlineCode>{` component that is passed in the schema information from the `}<inlineCode parentName=\"p\">{`veteranInformation`}</inlineCode>{` page as props. The test checks to make sure there are 7 `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and 4 `}<inlineCode parentName=\"p\">{`select`}</inlineCode>{` entries on the page. When there are errors with definitions on the form pages, you will often see inputs not being rendered, so this helps check for that scenario.\nThe next test in the file checks to see that the right fields are marked as required:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  it('should not submit without required info', () => {\n    const onSubmit = sinon.spy();\n    const form = mount(\n      <DefinitionTester\n        onSubmit={onSubmit}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    form.find('form').simulate('submit');\n    expect(form.find('.usa-input-error').length).to.equal(6);\n    expect(onSubmit.called).to.be.false;\n    form.unmount();\n  });\n`}</code></pre>\n    <p>{`This test simulates a form submission and then counts the number of error elements on the page, which is expected to be 6. The test checks that the existing validation rules are still generally in place and that additional rules haven't been added.\nFinally, this example test fills in all the data and submits the form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  it('should submit with all info filled in', () => {\n    const onSubmit = sinon.spy();\n    const form = mount(\n      <DefinitionTester\n        onSubmit={onSubmit}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    fillData(form, 'input#root_veteranFullName_first', 'test');\n    fillData(form, 'input#root_veteranFullName_last', 'test2');\n    fillData(form, 'input#root_veteranSocialSecurityNumber', '233224343');\n    selectRadio(form, 'root_gender', 'F');\n    fillDate(form, 'root_veteranDateOfBirth', '1920-01-04');\n    fillData(form, 'select#root_serviceBranch', 'F');\n    form.find('form').simulate('submit');\n    expect(form.find('.usa-input-error').length).to.equal(0);\n    expect(onSubmit.called).to.be.true;\n    form.unmount();\n  });\n`}</code></pre>\n    <p>{`Helper functions make the correct Enzyme calls to fill in data, so there isn't a lot of repeated code. The helpers are documented in the `}<inlineCode parentName=\"p\">{`schemaform-utils.jsx`}</inlineCode>{` file. The helpers fill in data and then check that the right number of inputs appear on the page after that change. Some of the tests also directly test logic in `}<inlineCode parentName=\"p\">{`depends`}</inlineCode>{` functions on the page configuration. `}</p>\n    <h2 {...{\n      \"id\": \"other-utilities\"\n    }}>{`Other utilities`}</h2>\n    <p>{`These utilities can be found in `}<inlineCode parentName=\"p\">{`platform/testing/unit/helpers.js`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mockFetch()`}</inlineCode>{` -  A function to mock the global fetch function and return the value provided in returnVal`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resetFetch()`}</inlineCode>{` - Resets the mocked fetch set with `}<inlineCode parentName=\"li\">{`mockFetch()`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mockApiRequest()`}</inlineCode>{` - Decorated `}<inlineCode parentName=\"li\">{`mockFetch()`}</inlineCode>{` that adds typical API headers to `}<inlineCode parentName=\"li\">{`returnVal`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mockMultipleApiRequests()`}</inlineCode>{` - Decorated `}<inlineCode parentName=\"li\">{`mockFetch()`}</inlineCode>{` that mocks a fetch call for each response object in an array`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`mockFetch(\n  new Error('fake error'), // returnVal\n  false, // shouldResolve: false returns rejected promise. default is true\n);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` This utility can be found in `}<inlineCode parentName=\"p\">{`platform/utilities/storage/localstorage.js`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getLocalStorage()`}</inlineCode>{` - convenience accessor for local storage and implements a fallback. Useful for stubbing localstorage.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"legacy-tools\"\n    }}>{`Legacy tools`}</h2>\n    <p>{`While ReactTestUtils, SkinDeep, and Enzyme are used in many of our tests, use React Testing Library for any updated or new tests.`}</p>\n    <h2 {...{\n      \"id\": \"libraries\"\n    }}>{`Libraries`}</h2>\n    <p>{`Unit tests use the following libraries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://mochajs.org/\"\n        }}>{`mocha.js`}</a>{`: Test framework.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.chaijs.com/\"\n        }}>{`chai.js`}</a>{`: BDD / TDD assertion library.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/domenic/chai-as-promised\"\n        }}>{`chai-as-promised`}</a>{`: Extends Chai with assertions about promises.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://sinonjs.org/\"\n        }}>{`sinon.js`}</a>{`: Standalone test spies, stubs and mocks.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n        }}>{`React Testing Library`}</a>{`: React Testing Library is a branch of `}<inlineCode parentName=\"li\">{`Testing Library`}</inlineCode>{` that allows users to test their React components through actual DOM nodes instead of rendered instances.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://airbnb.io/enzyme/\"\n        }}>{`enzyme`}</a>{`: Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components' output. You can also manipulate, traverse, and in some ways simulate runtime given the output.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/enzyme-adapter-react-16\"\n        }}>{`enzyme-adapter-react-16`}</a>{`: Enzyme React 16 integration.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/react-dom\"\n        }}>{`react-dom`}</a>{`: React DOM Library needed for testing React Components.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/test-utils.html\"\n        }}>{`react-dom/test-utils`}</a>{`: Test utilities for React DOM.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/react-test-renderer\"\n        }}>{`react-test-renderer`}</a>{`: This package provides an experimental React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://airbnb.io/enzyme/docs/guides/jsdom.html\"\n        }}>{`jsdom`}</a>{`: A JavaScript implementation of the WHATWG DOM and HTML standards, for use with node.js.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/mocha-junit-reporter\"\n        }}>{`mocha-junit-reporter`}</a>{`: Produces JUnit-style XML test results. This is used specifically for Jenkins so it can output and track test results in its system.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lennym/choma\"\n        }}>{`choma`}</a>{`: Random execution order for mocha suites.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}