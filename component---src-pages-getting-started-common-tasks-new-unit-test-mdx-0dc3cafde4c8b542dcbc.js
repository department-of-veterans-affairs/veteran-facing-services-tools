(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"3dLD":function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var a=n("q1tI"),i=n.n(a),r=n("Wbzz");function o(e){var t=e.item;return t.href?i.a.createElement("li",{key:t.name},i.a.createElement(r.Link,{to:t.href},t.name)):i.a.createElement("li",{key:t.name},t.name," (future)")}function s(e){var t=e.items,n=e.isSublist,a=void 0!==n&&n;return t.length?i.a.createElement("ul",{className:"site-c-sidenav-list"},t.map((function(e){return e.items?i.a.createElement("li",{key:e.name},a&&i.a.createElement(o,{item:e}),!a&&i.a.createElement("h2",{className:"heading-level-4"},e.name),i.a.createElement(s,{isSublist:!0,items:e.items})):i.a.createElement(o,{item:e,key:e.name})}))):null}var l=n("MEl4"),c=n.n(l);function m(e){var t=e.location,n=c.a.sections.find((function(e){return t.pathname.includes(e.href)}));return n?i.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},i.a.createElement("div",{className:"site-c-sidenav"},i.a.createElement(s,{items:n.items}))):null}function b(e){var t=e.sourceUrl;return t?i.a.createElement("div",null,i.a.createElement("i",{class:"fa fa-edit","aria-hidden":"true"})," ",i.a.createElement("a",{href:t},"Edit this page on GitHub")):null}var p=n("8FPV");function u(e){var t=e.children,n=e.location,a=e.pageContext;return i.a.createElement(p.a,{location:n},i.a.createElement("div",{className:"vads-l-row"},i.a.createElement(m,{location:n}),i.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},t,i.a.createElement(b,{sourceUrl:a.sourceUrl}))))}},j4L8:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return c}));var a=n("zLVn"),i=(n("q1tI"),n("7ljp")),r=n("3dLD"),o={},s={_frontmatter:o},l=r.a;function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)(l,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"writing-a-unit-test"},"Writing a unit test"),Object(i.b)("p",null,"All new code that is added to ",Object(i.b)("inlineCode",{parentName:"p"},"vets-website")," should be unit tested and unit tests should cover at least 75% of code paths. Write unit tests as you build to make sure your form (or other component) is behaving as you expect and to help guard against future bugs.\nFor example, you might create a unit test file for each page in a form and then test the following scenarios:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The correct number of inputs show up when you render the page."),Object(i.b)("li",{parentName:"ul"},"The correct number of fields display validation errors if you submit without entering any information."),Object(i.b)("li",{parentName:"ul"},"Any conditional logic on the page displays under the correct conditions.")),Object(i.b)("h2",{id:"unit-test-overview"},"Unit test overview"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"vets-website")," repo uses:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://mochajs.org/"},"Mocha")," for running unit tests"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"http://chaijs.com/"},"Chai")," for test assertions"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library (RTL)")," and ",Object(i.b)("a",{parentName:"li",href:"https://airbnb.io/enzyme/"},"Enzyme")," for mounting and inspecting React components",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"We encourage the use of React Testing Library in place of Enzyme. ","[See the migration docs]"," (",Object(i.b)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/migrate-from-enzyme"},"https://testing-library.com/docs/react-testing-library/migrate-from-enzyme"),")."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://sinonjs.org/"},"Sinon")," for stubs and spies"))),Object(i.b)("li",{parentName:"ul"},"Unit tests are ",Object(i.b)("strong",{parentName:"li"},"collocated with the application folder")," in a test directory that matches the application directory structure:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- ðŸ“‚ src\n  - ðŸ“‚ my-application\n    - ðŸ“‚ components\n      - MyComponent.jsx\n    - ðŸ“‚ tests\n      - ðŸ“‚ components\n        - MyComponent.unit.spec.jsx\n")),Object(i.b)("p",null,"Mocha runs any ",Object(i.b)("em",{parentName:"p"},"file_name"),".unit.spec.js file located in the ",Object(i.b)("inlineCode",{parentName:"p"},"/src")," folder. This file is usually located in a test directory close to the code being tested.\n",Object(i.b)("a",{parentName:"p",href:"/veteran-facing-services-tools/getting-started/common-tasks/test"},"Run the test")," locally through npm script commands, during the Jenkins build (Unit), and after merging to master."),Object(i.b)("h2",{id:"unit-test-conventions"},"Unit test conventions"),Object(i.b)("p",null,"Use the following conventions when writing a unit test."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { expect } from 'chai';\nimport { render, screen } from '@testing-library/react';\nimport MyComponent from '../../components/MyComponent';\ndescribe('my-application', () => {\n  describe('MyComponent', () => {\n    it('renders privacy act disclosure when \"show\" is true', () => {\n        render(<MyComponent show />);\n        expect(screen.getByRole('heading')).to.have.text('Privacy Act Disclosure');\n    });\n  });\n});\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"describe")," to organize tests by application and feature. Two levels should be adequate depending on the size of the application being tested. Try to avoid nesting deeper than two levels."),Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"it")," to describe the unit test:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Use active voice."),Object(i.b)("li",{parentName:"ul"},"Describe the behavior in terms specific to the unit."),Object(i.b)("li",{parentName:"ul"},"Do not abstract the test description with business logic."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Recommended"),":",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"it('truncates the address property when it is longer than 15 characters')")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"it('renders an error when props.errors contains at least one item')")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Not recommended"),":",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"it('shortens the address when the user has a long address')")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"it('shows an error when the user is not logged in')"))))))),Object(i.b)("h3",{id:"testing-components"},"Testing components"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use ",Object(i.b)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/api/#render"},"React Testing Library's ",Object(i.b)("inlineCode",{parentName:"a"},"render")," function")," when testing components."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { render } from '@testing-library/react';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('MyComponent', () => {\n  it('renders', () => {\n    ...\n    render(<MyComponent />);\n    ...\n  });\n});\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"If you're using Enzyme, use ",Object(i.b)("a",{parentName:"p",href:"https://airbnb.io/enzyme/docs/api/shallow.html"},"shallow")," instead of ",Object(i.b)("a",{parentName:"p",href:"https://airbnb.io/enzyme/docs/api/mount.html"},"mount")," when possible to test components."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Always ",Object(i.b)("inlineCode",{parentName:"li"},"unmount")," components at the end of the test.")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { mount } from 'enzyme';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('MyComponent', () => {\n  it('renders', () => {\n    ...\n    const form = mount(<MyComponent />);\n    ...\n    form.unmount();\n  });\n});\n")))),Object(i.b)("h2",{id:"unit-tests-for-forms-pages"},"Unit tests for forms pages"),Object(i.b)("p",null,"Use the following guidelines when writing a unit test for forms pages."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { expect } from 'chai';\nimport { render, screen } from '@testing-library/react';\nimport { DefinitionTester } from 'platform/testing/unit/schemaform-utils';\n\ndescribe('MyForm FormID', () => {\n  const {\n    schema,\n    uiSchema,\n    arrayPath,\n  } = formConfig.chapters.myFormChapter.pages.myFormPage;\n  it('renders myFormPage form', () => {\n    render(\n      <DefinitionTester\n        arrayPath={arrayPath}\n        pagePerItemIndex={0}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={initialData}\n        formData={initialData}\n        uiSchema={uiSchema}\n      />,\n    );\n    expect(screen.queryAllByRole('combobox')).to.equal(6); // from/to months, days; country, state\n    expect(screen.queryAllByRole('textbox')).to.equal(4); // facility name, from/to years, city\n  });\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Organize forms config tests by page."),Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("inlineCode",{parentName:"li"},"<DefinitionTester />")," to render form configs for testing."),Object(i.b)("li",{parentName:"ul"},"Test at least the following:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Number of each type of input is rendered (example above)"),Object(i.b)("li",{parentName:"ul"},"Any conditional display logic on the page"),Object(i.b)("li",{parentName:"ul"},"All field level validation errors")))),Object(i.b)("p",null,"When working with Enzyme, you can use the other ",Object(i.b)("inlineCode",{parentName:"p"},"schemaform-utils")," for filling out form data:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fillData()")," - Enzyme helper that fires a change event with a value for an element at the given selector")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"fillData(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  'USA', // value\n);\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fillDate()")," - Enzyme helper that fills in a date field with data from the given date string")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"fillDate(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  '1950-1-3', // value\n);\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"selectCheckbox()")," - Enzyme helper that fires a change event with a value for a checkbox at the given name")),Object(i.b)("h2",{id:"example-unit-tests---react-testing-library"},"Example unit tests - React Testing Library"),Object(i.b)("p",null,"We recommend using ",Object(i.b)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library")," for all your unit/integration testing needs."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'// SimpleLoginForm.js\nimport React from \'react\';\nconst SimpleLoginForm = ({ onSubmit }) => {\n  const [error, setError] = React.useState(\'\');\n  function handleSubmit(event) {\n    event.preventDefault();\n    const {\n      usernameInput: { value: username },\n      passwordInput: { value: password },\n    } = event.target.elements;\n    if (!username) {\n      setError(\'username is required\');\n    } else if (!password) {\n      setError(\'password is required\');\n    } else {\n      setError(\'\');\n      onSubmit({ username, password });\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor="usernameInput">Username</label>\n          <input id="usernameInput" />\n        </div>\n        <div>\n          <label htmlFor="passwordInput">Password</label>\n          <input id="passwordInput" type="password" />\n        </div>\n        <button type="submit">Submit</button>\n      </form>\n      {error ? <div role="alert">{error}</div> : null}\n    </div>\n  );\n};\nexport default SimpleLoginForm;\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"// SimpleLoginForm.unit.spec.jsx\nimport React from 'react';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport SimpleLoginForm from '../../components/SimpleLoginForm';\ndescribe('my-application', () => {\n  describe('SimpleLoginForm', () => {\n    it('calls onSubmit with the username and password when submit is clicked', () => {\n        const handleSubmit = sinon.spy();\n        const { getByLabelText, getByText } = render(<SimpleLoginForm onSubmit={handleSubmit} />);\n        const user = { username: 'user123', password: 'password123' };\n\n        userEvent.type(getByLabelText(/username/i), user.username);\n        userEvent.type(getByLabelText(/password/i), user.password);\n        userEvent.click(getByText(/submit/i));\n\n        expect(handleSubmit.callCount).to.equal(1); // alternatively `expect(handleSubmit.calledOnce).to.be.true()` works as well\n        expect(handleSubmit.calledWith(user)).to.be.true(); // for more explicit testing we can use `calledWithExactly` in place of `calledWith`\n    });\n  });\n});\n")),Object(i.b)("p",null,'We have written a "happy path" test for a ',Object(i.b)("inlineCode",{parentName:"p"},"SimpleLoginForm")," component. Let's break down this test."),Object(i.b)("h3",{id:"setup"},"Setup"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"...\nconst handleSubmit = sinon.spy();\nconst { getByLabelText, getByText } = render(<SimpleLoginForm onSubmit={handleSubmit} />);\nconst user = { username: 'user123', password: 'password123' };\n...\n")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"We mock the ",Object(i.b)("inlineCode",{parentName:"li"},"handleSubmit")," function."),Object(i.b)("li",{parentName:"ol"},"We instantiate the ",Object(i.b)("inlineCode",{parentName:"li"},"SimpleLoginForm")," component, passing in the mocked ",Object(i.b)("inlineCode",{parentName:"li"},"handleSubmit")," as a prop."),Object(i.b)("li",{parentName:"ol"},"We use the ",Object(i.b)("inlineCode",{parentName:"li"},"render")," function from RTL to produce actual DOM nodes."),Object(i.b)("li",{parentName:"ol"},"We get the RTL query functions from destructuring the return value of ",Object(i.b)("inlineCode",{parentName:"li"},"render"),". Alternatively, you can utilize ",Object(i.b)("a",{parentName:"li",href:"https://testing-library.com/docs/queries/about#screen"},Object(i.b)("inlineCode",{parentName:"a"},"screen"))," to access the query functions directly."),Object(i.b)("li",{parentName:"ol"},"We define the user data for reuse later in the test.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," In this example we opted to destructure the return value from our ",Object(i.b)("inlineCode",{parentName:"p"},"render")," function to give us our query functions. Alternatively, you can utilize ",Object(i.b)("a",{parentName:"p",href:"https://testing-library.com/docs/queries/about#screen"},"screen")," to access the query functions."),Object(i.b)("h3",{id:"dom-interactions-and-queries"},"DOM Interactions and Queries"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"...\nuserEvent.type(getByLabelText(/username/i), user.username);\nuserEvent.type(getByLabelText(/password/i), user.password);\nuserEvent.click(getByText(/submit/i));\n...\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Unit tests should be isolated"),Object(i.b)("li",{parentName:"ul"},"Components should use a unique label and text for each test.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," We can use the query functions that we destructured from ",Object(i.b)("inlineCode",{parentName:"p"},"render")," to find the input elements in our component by their label text. ",Object(i.b)("inlineCode",{parentName:"p"},"Testing Library")," provides a utility called ",Object(i.b)("a",{parentName:"p",href:"https://testing-library.com/docs/ecosystem-user-event/"},"userEvent")," that allows us to interact with the DOM nodes. We leverage the ",Object(i.b)("inlineCode",{parentName:"p"},"type")," interaction to enter our username and password into each respective field, then the ",Object(i.b)("inlineCode",{parentName:"p"},"click")," function to submit after querying with the submit button text."),Object(i.b)("h3",{id:"assertions"},"Assertions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"...\nexpect(handleSubmit.callCount).to.equal(1); // alternatively `expect(handleSubmit.calledOnce).to.be.true()` works as well\nexpect(handleSubmit.calledWith(user)).to.be.true(); // for more explicit testing we can use `calledWithExactly` in place of `calledWith`\n...\n")),Object(i.b)("p",null,"To conclude this test we need to check that our ",Object(i.b)("inlineCode",{parentName:"p"},"onSubmit")," function fired and received the correct data."),Object(i.b)("h2",{id:"example-unit-tests---enzyme"},"Example unit tests - Enzyme"),Object(i.b)("p",null,"VSP provides helper utilities to make writing tests easier. The following example unit tests illustrate some of these helpers. You can find these unit tests in the ",Object(i.b)("inlineCode",{parentName:"p"},"vets-website")," repo in the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/vets-website/blob/master/src/applications/vic-v2/tests/config/veteranInformation.unit.spec.jsx"},"veteranInformation.unit.spec.jsx")," file."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { mount } from 'enzyme';\nimport { DefinitionTester, fillData, selectRadio, fillDate } from '../../../../platform/testing/unit/schemaform-utils.jsx';\nimport formConfig from '../config/form.js';\ndescribe('VIC veteran information', () => {\n  const { schema, uiSchema } = formConfig.chapters.veteranInformation.pages.veteranInformation;\n  it('should render', () => {\n    const form = mount(\n      <DefinitionTester\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    expect(form.find('input').length).to.equal(7);\n    expect(form.find('select').length).to.equal(4);\n    form.unmount();\n  });\n  ...\n});\n")),Object(i.b)("p",null,"Helpers are imported from ",Object(i.b)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/vets-website/blob/master/src/platform/testing/unit/schemaform-utils.jsx"},Object(i.b)("inlineCode",{parentName:"a"},"schemaform-utils.jsx")),". The ",Object(i.b)("inlineCode",{parentName:"p"},"DefinitionTester")," is a component you can use to simulate a page being rendered without having to set up a whole form application with all the dependencies.\nThis example uses ",Object(i.b)("a",{parentName:"p",href:"http://airbnb.io/enzyme/"},"Enzyme")," and mounts a ",Object(i.b)("inlineCode",{parentName:"p"},"DefinitionTester")," component that is passed in the schema information from the ",Object(i.b)("inlineCode",{parentName:"p"},"veteranInformation")," page as props. The test checks to make sure there are 7 ",Object(i.b)("inlineCode",{parentName:"p"},"input")," and 4 ",Object(i.b)("inlineCode",{parentName:"p"},"select")," entries on the page. When there are errors with definitions on the form pages, you will often see inputs not being rendered, so this helps check for that scenario.\nThe next test in the file checks to see that the right fields are marked as required:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"  it('should not submit without required info', () => {\n    const onSubmit = sinon.spy();\n    const form = mount(\n      <DefinitionTester\n        onSubmit={onSubmit}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    form.find('form').simulate('submit');\n    expect(form.find('.usa-input-error').length).to.equal(6);\n    expect(onSubmit.called).to.be.false;\n    form.unmount();\n  });\n")),Object(i.b)("p",null,"This test simulates a form submission and then counts the number of error elements on the page, which is expected to be 6. The test checks that the existing validation rules are still generally in place and that additional rules haven't been added.\nFinally, this example test fills in all the data and submits the form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"  it('should submit with all info filled in', () => {\n    const onSubmit = sinon.spy();\n    const form = mount(\n      <DefinitionTester\n        onSubmit={onSubmit}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={{}}\n        uiSchema={uiSchema}\n        />\n    );\n    fillData(form, 'input#root_veteranFullName_first', 'test');\n    fillData(form, 'input#root_veteranFullName_last', 'test2');\n    fillData(form, 'input#root_veteranSocialSecurityNumber', '233224343');\n    selectRadio(form, 'root_gender', 'F');\n    fillDate(form, 'root_veteranDateOfBirth', '1920-01-04');\n    fillData(form, 'select#root_serviceBranch', 'F');\n    form.find('form').simulate('submit');\n    expect(form.find('.usa-input-error').length).to.equal(0);\n    expect(onSubmit.called).to.be.true;\n    form.unmount();\n  });\n")),Object(i.b)("p",null,"Helper functions make the correct Enzyme calls to fill in data, so there isn't a lot of repeated code. The helpers are documented in the ",Object(i.b)("inlineCode",{parentName:"p"},"schemaform-utils.jsx")," file. The helpers fill in data and then check that the right number of inputs appear on the page after that change. Some of the tests also directly test logic in ",Object(i.b)("inlineCode",{parentName:"p"},"depends")," functions on the page configuration. "),Object(i.b)("h2",{id:"other-utilities"},"Other utilities"),Object(i.b)("p",null,"These utilities can be found in ",Object(i.b)("inlineCode",{parentName:"p"},"platform/testing/unit/helpers.js"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mockFetch()")," -  A function to mock the global fetch function and return the value provided in returnVal",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"resetFetch()")," - Resets the mocked fetch set with ",Object(i.b)("inlineCode",{parentName:"li"},"mockFetch()")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mockApiRequest()")," - Decorated ",Object(i.b)("inlineCode",{parentName:"li"},"mockFetch()")," that adds typical API headers to ",Object(i.b)("inlineCode",{parentName:"li"},"returnVal")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mockMultipleApiRequests()")," - Decorated ",Object(i.b)("inlineCode",{parentName:"li"},"mockFetch()")," that mocks a fetch call for each response object in an array")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"mockFetch(\n  new Error('fake error'), // returnVal\n  false, // shouldResolve: false returns rejected promise. default is true\n);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," This utility can be found in ",Object(i.b)("inlineCode",{parentName:"p"},"platform/utilities/storage/localstorage.js"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"getLocalStorage()")," - convenience accessor for local storage and implements a fallback. Useful for stubbing localstorage.")),Object(i.b)("h2",{id:"legacy-tools"},"Legacy tools"),Object(i.b)("p",null,"While ReactTestUtils, SkinDeep, and Enzyme are used in many of our tests, use React Testing Library for any updated or new tests."),Object(i.b)("h2",{id:"libraries"},"Libraries"),Object(i.b)("p",null,"Unit tests use the following libraries:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://mochajs.org/"},"mocha.js"),": Test framework."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.chaijs.com/"},"chai.js"),": BDD / TDD assertion library."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/domenic/chai-as-promised"},"chai-as-promised"),": Extends Chai with assertions about promises."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://sinonjs.org/"},"sinon.js"),": Standalone test spies, stubs and mocks."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library"),": React Testing Library is a branch of ",Object(i.b)("inlineCode",{parentName:"li"},"Testing Library")," that allows users to test their React components through actual DOM nodes instead of rendered instances."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://airbnb.io/enzyme/"},"enzyme"),": Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components' output. You can also manipulate, traverse, and in some ways simulate runtime given the output."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/enzyme-adapter-react-16"},"enzyme-adapter-react-16"),": Enzyme React 16 integration."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/react-dom"},"react-dom"),": React DOM Library needed for testing React Components."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://reactjs.org/docs/test-utils.html"},"react-dom/test-utils"),": Test utilities for React DOM."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/react-test-renderer"},"react-test-renderer"),": This package provides an experimental React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://airbnb.io/enzyme/docs/guides/jsdom.html"},"jsdom"),": A JavaScript implementation of the WHATWG DOM and HTML standards, for use with node.js."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/mocha-junit-reporter"},"mocha-junit-reporter"),": Produces JUnit-style XML test results. This is used specifically for Jenkins so it can output and track test results in its system."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/lennym/choma"},"choma"),": Random execution order for mocha suites.")))}c.isMDXComponent=!0},zLVn:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return a}))}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-new-unit-test-mdx-0dc3cafde4c8b542dcbc.js.map