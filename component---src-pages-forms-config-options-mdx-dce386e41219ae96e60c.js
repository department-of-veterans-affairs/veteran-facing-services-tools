(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"3dLD":function(e,n,t){"use strict";t.d(n,"a",(function(){return u}));var a=t("q1tI"),r=t.n(a),i=t("Wbzz");function o(){return r.a.createElement(i.StaticQuery,{query:"68798663",render:function(e){return r.a.createElement(c,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})}})}function s(e){var n=e.item;return n.href?r.a.createElement("li",{key:n.name},r.a.createElement(i.Link,{to:n.href},n.name)):r.a.createElement("li",{key:n.name},n.name," (future)")}function c(e){var n=e.items,t=e.isSublist,a=void 0!==t&&t;return n.length?r.a.createElement("ul",{className:"site-c-sidenav-list"},n.map((function(e){return e.items?r.a.createElement("li",{key:e.name},a&&r.a.createElement(s,{item:e}),!a&&r.a.createElement("h2",{className:"heading-level-4"},e.name),r.a.createElement(c,{isSublist:!0,items:e.items})):"componentList"===e.query?r.a.createElement("li",{key:e.name},a&&r.a.createElement(s,{item:e}),!a&&r.a.createElement("h2",{className:"heading-level-4"},e.name),r.a.createElement(o,null)):r.a.createElement(s,{item:e,key:e.name})}))):null}var l=t("MEl4"),h=t.n(l);function m(e){var n=e.location,t=h.a.sections.find((function(e){return n.pathname.includes(e.href)}));return t?r.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},r.a.createElement("div",{className:"site-c-sidenav"},r.a.createElement(c,{items:t.items}))):null}function d(e){var n=e.sourceUrl;return n?r.a.createElement("div",null,r.a.createElement("i",{class:"fa fa-edit","aria-hidden":"true"})," ",r.a.createElement("a",{href:n},"Edit this page on GitHub")):null}var f=t("8FPV");function u(e){var n=e.children,t=e.location,a=e.pageContext;return r.a.createElement(f.a,{location:t},r.a.createElement("div",{className:"vads-l-row"},r.a.createElement(m,{location:t}),r.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},n,r.a.createElement(d,{sourceUrl:a.sourceUrl}))))}},YRlm:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return l}));var a=t("zLVn"),r=(t("q1tI"),t("7ljp")),i=t("3dLD"),o={},s={_frontmatter:o},c=i.a;function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.mdx)(c,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"form-config-options"},"Form config options"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const formConfig = {\n  // Prefix string to add to the path for each page.\n  urlPrefix: '',\n\n  // The introduction page component. To exclude an introduction page, remove\n  // this component.\n  introduction: IntroductionComponent,\n\n  // The confirmation page component that will render after the user\n  // successfully submits the form.\n  confirmation: ConfirmationComponent,\n\n  // The prefix for Google Analytics events that are sent for different form\n  // actions.\n  trackingPrefix: '',\n\n  // The title of the form, rendered on all pages. Accepts a string or function\n  // params include (currentLocation, formConfig, formData, children)\n  title: '', // ({ formData }) => formData.needsNewTitle ? 'Alternate' : 'Form',\n\n  // The subtitle of the form, usually the form number. The subtitle is rendered\n  // on all pages when there's also a title.\n  subTitle: '',\n\n  // Schema definitions that can be referenced on any page. These are added to\n  // each page's schema in the reducer code, so that you don't have to put all\n  // of the common fields in the definitions property in each page schema. For\n  // more information on definitions, see schema.definitions below.\n  defaultDefinitions: {},\n\n  // When a user begins completing a pre-filled form, this function is called\n  // after data migrations are run for pre-filled data in order to make\n  // necessary updates to the data or form schema ahead of time.\n  prefillTransformer: (pages, formData, metadata ) => { pages, formData, metadata },\n\n  // The object that contains the configuration for each chapter.\n  chapters: {\n    // Each property is the key for a chapter.\n    chapterOne: {\n      // The title of the chapter.\n      title: '',\n\n      // The object that contains the pages in each chapter.\n      pages: {\n        // Each property is the key for a page, and should be unique across\n        // chapters.\n        pageOne: {\n          // The URL for the page.\n          path: 'some-path',\n\n          // The title of the page that renders on the review page.\n          title: '',\n          // `title` can also be a function that receives the current data as a\n          // parameter:\n          title: formData => `A title for ${formData.thing}`,\n\n          // Any initial data that should be set for the form.\n          initialData: {\n            field1: 'Default string'\n          },\n\n          // Specifies that a page will turn its schema into a page for each\n          // item in an array, such as an array of children with a page for each\n          // child. The schema/uiSchema for this type of page should be built as\n          // usual for an array field.\n          showPagePerItem: true,\n          // The path to the array.\n          arrayPath: 'children',\n          // Items in the array that should not have a page.\n          itemFilter: () => true,\n          // You must specify a path with an :index parameter.\n          path: 'some-path/:index',\n\n          // The JSON schema object for the page, following the JSON Schema\n          // format.\n          schema: {\n            type: 'object',\n            // A schema's properties refer to definitions. For example:\n            // \"homePhone\": { \"$ref\": \"#/definitions/phone\" } In the\n            // configuration file, the definition for `phone` must be added into\n            // definitions in order to be parsed correctly and added to\n            // `homePhone`.\n            definitions: {},\n            properties: {\n              field1: {\n                type: 'string'\n              },\n              // Fields of type `string`, `boolean`, `number`, and `array` that\n              // begin with `view:` are excluded from data that's sent to the\n              // server. Instead, their children are merged into the parent\n              // object and sent to the server. Use these to exclude fields from\n              // being sent to the server, such as a question that's only used\n              // to reveal other questions, or to group related questions\n              // together to be conditionally revealed that aren't in an object\n              // in the schema.\n              'view:field2': {\n                type: 'string'\n              },\n              'view:artificialGroup': {\n                type: 'object',\n                properties: {\n                  // `view:artificialGroup` is flattened. `subField1` and\n                  // `subField2` are siblings of `field1` when sent to the API.\n                  subField1: {\n                    type: 'string'\n                  },\n                  subField2: {\n                    type: 'boolean'\n                  }\n                }\n              }\n            }\n          },\n\n          // See \"About the `schema` and `uiSchema` objects\" below.\n          uiSchema: {\n            'ui:title': 'My form',\n            field1: {\n              'ui:title': 'My field'\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default formConfig\n")),Object(r.mdx)("p",null,Object(r.mdx)("a",Object.assign({parentName:"p"},{href:"/about-the-schema-and-uischema-objects"}),"About the schema and uiSchema objects")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-forms-config-options-mdx-dce386e41219ae96e60c.js.map