(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{"3dLD":function(e,n,t){"use strict";t.d(n,"a",(function(){return g}));var a=t("q1tI"),o=t.n(a),r=t("8FPV"),m=(t("gu/5"),t("eoYm"),t("v9g0"),t("pJf4"),t("Yk4M")),c=t("Wbzz");function s(){return o.a.createElement(c.StaticQuery,{query:"157057713",render:function(e){return o.a.createElement(l,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})},data:m})}function p(e){var n=e.item;return n.href?o.a.createElement("li",{key:n.name},o.a.createElement(c.Link,{to:n.href},n.name)):o.a.createElement("li",{key:n.name},n.name," (future)")}function l(e){var n=e.items,t=e.isSublist,a=void 0!==t&&t;return n.length?o.a.createElement("ul",{className:"site-c-sidenav-list"},n.map((function(e){return e.items?o.a.createElement("li",{key:e.name},a&&o.a.createElement(p,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(l,{isSublist:!0,items:e.items})):"componentList"===e.query?o.a.createElement("li",{key:e.name},a&&o.a.createElement(p,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(s,null)):o.a.createElement(p,{item:e,key:e.name})}))):null}var i=t("MEl4"),u=t.n(i);function d(e){var n=e.location,t=u.a.sections.find((function(e){return n.pathname.includes(e.href)}));return t?o.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},o.a.createElement("div",{className:"site-c-sidenav"},o.a.createElement(l,{items:t.items}))):null}function g(e){var n=e.children,t=e.location;return o.a.createElement(r.a,{location:t},o.a.createElement("div",{className:"vads-l-row"},o.a.createElement(d,{location:t}),o.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},n)))}},Yk4M:function(e){e.exports=JSON.parse('{"data":{"components":{"edges":[{"node":{"path":"/visual-design/components/accepttermsprompt/","context":{"source":"component","name":"AcceptTermsPrompt"}}},{"node":{"path":"/visual-design/components/additionalinfo/","context":{"source":"component","name":"AdditionalInfo"}}},{"node":{"path":"/visual-design/components/alertbox/","context":{"source":"component","name":"AlertBox"}}},{"node":{"path":"/visual-design/components/dropdownpanel/","context":{"source":"component","name":"DropDownPanel"}}},{"node":{"path":"/visual-design/components/breadcrumbs/","context":{"source":"component","name":"Breadcrumbs"}}},{"node":{"path":"/visual-design/components/errorablecheckbox/","context":{"source":"component","name":"ErrorableCheckbox"}}},{"node":{"path":"/visual-design/components/errorabledate/","context":{"source":"component","name":"ErrorableDate"}}},{"node":{"path":"/visual-design/components/errorablecheckboxgroup/","context":{"source":"component","name":"ErrorableCheckboxGroup"}}},{"node":{"path":"/visual-design/components/collapsiblepanel/","context":{"source":"component","name":"CollapsiblePanel"}}},{"node":{"path":"/visual-design/components/errorablefileinput/","context":{"source":"component","name":"ErrorableFileInput"}}},{"node":{"path":"/visual-design/components/errorablenumberinput/","context":{"source":"component","name":"ErrorableNumberInput"}}},{"node":{"path":"/visual-design/components/errorableradiobuttons/","context":{"source":"component","name":"ErrorableRadioButtons"}}},{"node":{"path":"/visual-design/components/errorablemonthyear/","context":{"source":"component","name":"ErrorableMonthYear"}}},{"node":{"path":"/visual-design/components/errorableselect/","context":{"source":"component","name":"ErrorableSelect"}}},{"node":{"path":"/visual-design/components/errorabletextinput/","context":{"source":"component","name":"ErrorableTextInput"}}},{"node":{"path":"/visual-design/components/expandinggroup/","context":{"source":"component","name":"ExpandingGroup"}}},{"node":{"path":"/visual-design/components/errorabletextarea/","context":{"source":"component","name":"ErrorableTextArea"}}},{"node":{"path":"/visual-design/components/helpmenu/","context":{"source":"component","name":"HelpMenu"}}},{"node":{"path":"/visual-design/components/iconsearch/","context":{"source":"component","name":"IconSearch"}}},{"node":{"path":"/visual-design/components/iconhelp/","context":{"source":"component","name":"IconHelp"}}},{"node":{"path":"/visual-design/components/iconbase/","context":{"source":"component","name":"IconBase"}}},{"node":{"path":"/visual-design/components/iconuser/","context":{"source":"component","name":"IconUser"}}},{"node":{"path":"/visual-design/components/loadingindicator/","context":{"source":"component","name":"LoadingIndicator"}}},{"node":{"path":"/visual-design/components/ombinfo/","context":{"source":"component","name":"OMBInfo"}}},{"node":{"path":"/visual-design/components/pagination/","context":{"source":"component","name":"Pagination"}}},{"node":{"path":"/visual-design/components/progressbar/","context":{"source":"component","name":"ProgressBar"}}},{"node":{"path":"/visual-design/components/progressbutton/","context":{"source":"component","name":"ProgressButton"}}},{"node":{"path":"/visual-design/components/privacyagreement/","context":{"source":"component","name":"PrivacyAgreement"}}},{"node":{"path":"/visual-design/components/promobanner/","context":{"source":"component","name":"PromoBanner"}}},{"node":{"path":"/visual-design/components/searchmenu/","context":{"source":"component","name":"SearchMenu"}}},{"node":{"path":"/visual-design/components/segmentedprogressbar/","context":{"source":"component","name":"SegmentedProgressBar"}}},{"node":{"path":"/visual-design/components/sortabletable/","context":{"source":"component","name":"SortableTable"}}},{"node":{"path":"/visual-design/components/modal/","context":{"source":"component","name":"Modal"}}},{"node":{"path":"/visual-design/components/systemdownview/","context":{"source":"component","name":"SystemDownView"}}},{"node":{"path":"/visual-design/components/megamenu/","context":{"source":"component","name":"MegaMenu"}}}]}}}')},s4T1:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return s})),t.d(n,"_frontmatter",(function(){return p}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/");var a=t("q1tI"),o=t.n(a),r=t("6qfE"),m=t("3dLD");var c={},s=function(e){var n,t;function a(n){var t;return(t=e.call(this,n)||this).layout=m.a,t}return t=e,(n=a).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,a.prototype.render=function(){var e=this.props,n=e.components,t=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",Layout:this.layout,layoutProps:Object.assign({},c,t),components:n},o.a.createElement("h1",{id:"debugging-tests"},"Debugging tests"),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"strong"}," Unit Tests "))),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"You can put a console.log in your test code. When you run the test, the output will be in the command line.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Use Chrome devtools to debug unit tests"),o.a.createElement(r.MDXTag,{name:"ol",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Go to ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"chrome://inspect/"}},"chrome://inspect/"),".")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Add a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"debugger")," statement in your test code and if you want to run only your test add the ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},".only")," on your test like so. Make sure to remove the ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},".only")," once you are done."),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"  it.only('testing something', () => {\n    debugger\n\n    expect(value).to.eq(true);\n  })\n"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"run in the terminal"),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"  $ BABEL_ENV=test node_modules/.bin/mocha --inspect-brk --opts src/platform/testing/unit/mocha.opts --recursive '{test,src}/**/*.unit.spec.js?(x)' src/platform/testing/unit/helper.js\n"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"It might take awhile for the tests to setup, just be patient and eventually it will run.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Once the test runs, your code should break at your debugger statement.")))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"VSCode's debugging tool for unit tests"),o.a.createElement(r.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Add this ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"Mocha Tests")," configuration to your ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"li"},".vscode/launch.json")," file",o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},'  {\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Mocha Tests",\n            "env": {"BABEL_ENV": "test"},\n            "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/mocha",\n            "runtimeArgs": [\n                "--inspect",\n                "--opts",\n                "${workspaceFolder}/src/platform/testing/unit/mocha.opts",\n                "--recursive",\n                "${workspaceFolder}/{test,src}/**/*.unit.spec.js?(x)",\n                "${workspaceFolder}/src/platform/testing/unit/helper.js"\n            ],\n            "port": 9229\n        }\n    ]\n  }\n'))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},"Now you can add breakpoints or debugger statements to debug your code through the VSCode debugger tools.")))),o.a.createElement(r.MDXTag,{name:"p",components:n},"*** End to End tests"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"It's possible to set an infinite pause (",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".pause()"),") in the test code and then see what's happening at a given point in the browser where the test is running."),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"  client\n    .openUrl('http://localhost:3000')\n    .waitForElementVisible('body', Timeouts.normal)\n    .pause()\n    .click('.submit_button')\n"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Using Node Chrome DevTools. You can add a (",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".perform"),") method and either console.log or add a debugger statement to debug your code in the callback function."),o.a.createElement(r.MDXTag,{name:"ol",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"add a perform method in your code."),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"client\n  .openUrl('http://localhost:3000')\n  .waitForElementVisible('body', Timeouts.normal)\n  .perform(() => {\n    console.log(testData);\n\n    debugger\n  })\n  .click('.submit_button')\n"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"open up ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"chrome://inspect"}},"chrome://inspect")," in your browser.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"In your terminal run. You can pass in a specific file path to test after the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"nightwatch.js")," or leave it blank to run all tests."),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"li"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"$ BABEL_ENV=test WEB_PORT=3001 node --inspect-brk node_modules/nightwatch/bin/runner.js -c config/nightwatch.js [optional file to test]\n"))),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"after the program starts it should pause at your debugger statement or you should see your console.logs in the console."))))))},a}(o.a.Component),p={}}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-debugging-tests-mdx-13e786955a645dbc74fe.js.map