{"version":3,"sources":["webpack:///./src/components/EditLink.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/pages/forms/bypassing-schemaform.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["EditLink","sourceUrl","class","aria-hidden","href","SidebarLayout","children","location","pageContext","Layout","className","Sidebar","id","SidebarItem","item","key","name","to","SidebarItems","items","isSublist","length","map","sidebarSection","sidebarData","sections","find","section","pathname","includes","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-forms-bypassing-schemaform-mdx-7eb11c6136ff65d00bf9.js","sourcesContent":["import React from 'react';\n\nexport default function EditLink({ sourceUrl }) {\n  return sourceUrl ? (\n    <div>\n      <i class=\"fa fa-edit\" aria-hidden=\"true\" />{' '}\n      <a href={sourceUrl}>Edit this page on GitHub</a>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport EditLink from '../components/EditLink';\nimport Layout from './Layout';\n\n/**\n * SidebarLayout\n *\n * @class SidebarLayout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location, pageContext }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row site-l-wrapper\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <EditLink sourceUrl={pageContext.sourceUrl} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\n\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/veteran-facing-services-tools/veteran-facing-services-tools/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"bypassing-the-schemaform\"\n    }}>{`Bypassing the SchemaForm`}</h1>\n    <p>{`The schema-based forms library can be used to quickly build simple form applications. It handles a lot of common things under the hood such as validation, routing, and state management.`}</p>\n    <p>{`For more complicated pages, however, it can be very difficult to work with the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` to do what you need to. This is where bypassing the `}<inlineCode parentName=\"p\">{`SchemaForm`}</inlineCode>{` comes in.`}</p>\n    <h2 {...{\n      \"id\": \"what-does-bypassing-the-schemaform-mean\"\n    }}>{`What does \"bypassing the SchemaForm\" mean?`}</h2>\n    <p>{`The schema-based forms library in `}<inlineCode parentName=\"p\">{`vets-website`}</inlineCode>{` renders a component called `}<inlineCode parentName=\"p\">{`SchemaForm`}</inlineCode>{`. This component uses `}<inlineCode parentName=\"p\">{`react-jsonschema-form`}</inlineCode>{` to render form fields using the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` for a page in the `}<inlineCode parentName=\"p\">{`formConfig`}</inlineCode>{`. `}<strong parentName=\"p\">{`Bypassing the `}<inlineCode parentName=\"strong\">{`SchemaForm`}</inlineCode>{` component means you can render a form page using plain React components.`}</strong>{` No `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{`. No `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{`.`}</p>\n    <p>{`You may bypass `}<inlineCode parentName=\"p\">{`SchemaForm`}</inlineCode>{` for one page at a time. This means you can use `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` when it's helpful, and ignore it when it isn't.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-bypass-schemaform\"\n    }}>{`How to bypass SchemaForm`}</h2>\n    <p>{`In your form's `}<inlineCode parentName=\"p\">{`formConfig`}</inlineCode>{` for a given page, you may supply `}<inlineCode parentName=\"p\">{`CustomPage`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{` properties which contain React components.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form/config.js\nimport CustomPage from './CustomPage'; // React component\nimport CustomPageReview from './CustomPageReview'; // React component\n\nexport const formConfig = {\n  // Some config here...\n  chapters: {\n    chapterOneName: {\n      // Chapter config here...\n      pages: {\n        mySchemalessPage: {\n          path: 'my-schemaless-page',\n          title: 'Bypassing the SchemaForm',\n          CustomPage,\n          CustomPageReview,\n          schema: { // This does still need to be here or it'll throw an error\n            type: 'object',\n            properties: {}, // But the properties can be empty\n          },\n          uiSchema: {},\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`There are a few important things going on here:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`We pass `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` to the page's config`}</li>\n      <li parentName=\"ol\">{`We pass `}<inlineCode parentName=\"li\">{`CustomPageReview`}</inlineCode>{` to the page's config`}</li>\n      <li parentName=\"ol\">{`We `}<em parentName=\"li\">{`still`}</em>{` supply a `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{`, but leave them (essentially) empty`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If we leave them out entirely, the library will throw an error`}</li>\n        </ul>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"custompage-props\"\n    }}>{`CustomPage props`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: String`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The name of the page in the `}<inlineCode parentName=\"li\">{`formConfig`}</inlineCode></li>\n          <li parentName=\"ul\">{`In the example above, it's `}<inlineCode parentName=\"li\">{`mySchemalessPage`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title`}</inlineCode>{`: String`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The title of the page in the `}<inlineCode parentName=\"li\">{`formConfig`}</inlineCode></li>\n          <li parentName=\"ul\">{`In the example above, it's `}<inlineCode parentName=\"li\">{`Bypassing the SchemaForm`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: Object`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The entire form data`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Important:`}</strong>{` It contains the form data for the entire form, not just for the page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pagePerItemIndex`}</inlineCode>{`: Number | undefined`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`showPagePerItem`}</inlineCode>{` is true for the page, this contains the array index`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onReviewPage`}</inlineCode>{`: Boolean`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`True if the page is being rendered in edit mode on the review page`}</li>\n          <li parentName=\"ul\">{`This is useful for rendering either the form navigation buttons or the update button on the review page`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n                  \"href\": \"#render-the-form-navigation-or-update-button\"\n                }}>{`Common tasks`}</a>{` below for more information`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`trackingPrefix`}</inlineCode>{`: String`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The tracking prefix specified in for the form in `}<inlineCode parentName=\"li\">{`formConfig`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uploadFile`}</inlineCode>{`: Function`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The function to call to upload a file`}</li>\n          <li parentName=\"ul\">{`Not supplied when `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` is rendered on the review page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`goBack`}</inlineCode>{`: () => void`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The function to call to move back a page in the form`}</li>\n          <li parentName=\"ul\">{`Not supplied when `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` is rendered on the review page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`goForward`}</inlineCode>{`: () => void`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The function to call to move forward a page in the form`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Caveat:`}</strong>{` Rather than assigning this to a button's `}<inlineCode parentName=\"li\">{`onClick`}</inlineCode>{` event handler, make that button a submit button and use `}<inlineCode parentName=\"li\">{`<form onSubmit={goForward}>...</form>`}</inlineCode>{` so the user only navigates to the next page if there are no validation errors`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n                  \"href\": \"#render-the-form-navigation-or-update-button\"\n                }}>{`Common tasks`}</a>{` below for more information`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`goToPath`}</inlineCode>{`: Function`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Function to call if you need to go to a specific path within the form`}</li>\n          <li parentName=\"ul\">{`When callign this function with a valid active path, it will return you to that page. An invalid paths will send you back one page, so be careful. For example, `}<inlineCode parentName=\"li\">{`goToPath('/second-page')`}</inlineCode></li>\n          <li parentName=\"ul\">{`Not supplied when `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` is rendered on the review page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updatePage`}</inlineCode>{`: () => void`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Supplied only when rendering `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` on the review page`}</li>\n          <li parentName=\"ul\">{`The function to call when the user is finished editing the data`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"custompagereview-props\"\n    }}>{`CustomPageReview props`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`editPage`}</inlineCode>{`: () => void`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The function to call to initiate editing the data on the review page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: String`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The name of the page in the `}<inlineCode parentName=\"li\">{`formConfig`}</inlineCode></li>\n          <li parentName=\"ul\">{`In the example above, it's `}<inlineCode parentName=\"li\">{`mySchemalessPage`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title`}</inlineCode>{`: String`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The title of the page in the `}<inlineCode parentName=\"li\">{`formConfig`}</inlineCode></li>\n          <li parentName=\"ul\">{`In the example above, it's `}<inlineCode parentName=\"li\">{`Bypassing the SchemaForm`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: Object`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The entire form data`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Important:`}</strong>{` It contains the form data for the entire form, not just for the page`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pagePerItemIndex`}</inlineCode>{`: Number | undefined`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`showPagePerItem`}</inlineCode>{` is true for the page, this contains the array index`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"the-review-page\"\n    }}>{`The review page`}</h2>\n    <p>{`There are three options for showing your page content on the review page:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Use the `}<inlineCode parentName=\"li\">{`CustomPageReview`}</inlineCode></li>\n      <li parentName=\"ol\">{`Automatically render the page content using `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Important:`}</strong>{` You may still use `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` with this option; `}<a parentName=\"li\" {...{\n              \"href\": \"#using-schema-and-uischema\"\n            }}>{`see below`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Hide the page entirely`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"using-custompagereview\"\n    }}>{`Using CustomPageReview`}</h3>\n    <p>{`To bypass the automatic data rendering, you may supply a `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{`. In your page's config:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Supply a React component to `}<inlineCode parentName=\"li\">{`CustomPageReview`}</inlineCode></li>\n    </ol>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#custompagereview-props\"\n      }}><inlineCode parentName=\"a\">{`CustomPageReview`}</inlineCode>{` props`}</a>{` for the props that will be passed to this component.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You may use `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{` with or without `}<inlineCode parentName=\"p\">{`CustomPage`}</inlineCode>{`. If your page has a `}<inlineCode parentName=\"p\">{`CustomPage`}</inlineCode>{` component and `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` will be ignored altogether, so you don't need to spend time writing them.`}</p>\n    <h3 {...{\n      \"id\": \"using-schema-and-uischema\"\n    }}>{`Using schema and uiSchema`}</h3>\n    <p>{`You may bypass the `}<inlineCode parentName=\"p\">{`SchemaForm`}</inlineCode>{` on the form page but still retain the automatic review page data rendering. Do the following in your page's config:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Add the `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{` as normal`}</li>\n      <li parentName=\"ol\">{`Set `}<inlineCode parentName=\"li\">{`CustomPageReview`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` If you have a `}<inlineCode parentName=\"p\">{`CustomPage`}</inlineCode>{` but `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`schema.properties`}</inlineCode>{` is empty, the forms library will throw an error. This is to make sure you're deliberately choosing to supply a custom page, use the automatic data rendering, or hide the page.`}</p>\n    <h3 {...{\n      \"id\": \"hiding-the-page\"\n    }}>{`Hiding the page`}</h3>\n    <p>{`If you want the page to appear in the normal form flow but not on the review page, do the following in your page's config`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Supply a `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set `}<inlineCode parentName=\"li\">{`CustomPageReview`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`null`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set `}<inlineCode parentName=\"li\">{`schema.properties`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`{}`}</inlineCode></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"common-tasks\"\n    }}>{`Common tasks`}</h2>\n    <p>{`There are a few common tasks you'll need to perform when bypassing the `}<inlineCode parentName=\"p\">{`SchemaForm`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"render-the-form-navigation-or-update-button\"\n    }}>{`Render the form navigation or update button`}</h3>\n    <p>{`When using a `}<inlineCode parentName=\"p\">{`CustomPage`}</inlineCode>{`, you'll need to make sure to render the form navigation and review page update buttons. To simplify this, the forms library has a `}<inlineCode parentName=\"p\">{`FormNavButtons`}</inlineCode>{` component.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// CustomPage.jsx\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { TextField } from '@department-of-veterans-affairs/formulate';\n\nimport FormNavButtons from '~/platform/forms-system/src/js/components/FormNavButtons';\nimport Form from '~/platform/forms/formulate-integration/Form';\n\nconst CustomPage = ({\n  data,\n  goBack,\n  goForward,\n  onReviewPage,\n  updatePage,\n}) => {\n  const navButtons = <FormNavButtons goBack={goBack} submitToContinue />;\n  const updateButton = <button type=\"submit\">Review update button</button>;\n  return (\n    <Formik\n      initialValues={data}\n      onSubmit={onReviewPage ? updatePage : goForward}\n    >\n      <Form>\n        <TextField\n          name=\"theData\"\n          label=\"The data to collect\"\n          required\n        />\n        {onReviewPage ? updateButton : navButtons}\n      </Form>\n    </Formik>\n  );\n};\n\nexport default CustomPage;\n`}</code></pre>\n    <p>{`There are a few important parts to note here:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The navigation buttons are imported from `}<inlineCode parentName=\"li\">{`~/platform/forms-system/src/js/components/FormNavButtons`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`goForward`}</inlineCode>{` is supplied to the `}<inlineCode parentName=\"li\">{`onSubmit`}</inlineCode>{` event handler prop and `}<inlineCode parentName=\"li\">{`submitToContinue`}</inlineCode>{` is passed to `}<inlineCode parentName=\"li\">{`FormNavButtons`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is so the `}<inlineCode parentName=\"li\">{`Continue`}</inlineCode>{` button is `}<inlineCode parentName=\"li\">{`type=\"submit\"`}</inlineCode>{` and navigation only occurs if there are no validation errors`}</li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`const navButtons = <FormNavButtons goBack={goBack} goForward={goForward} />`}</inlineCode>{`, then the user would continue to the next page even if there were validation errors`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updateButton`}</inlineCode>{` is `}<inlineCode parentName=\"li\">{`type=\"submit\"`}</inlineCode>{` for the same reasons outlined above`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`We call `}<inlineCode parentName=\"li\">{`updatePage`}</inlineCode>{` if there are no validation errors by supplying `}<inlineCode parentName=\"li\">{`onSubmit={updatePage}`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`<Formik>`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`{onReviewPage ? updateButton : navButtons }`}</inlineCode>{` renders the context-appropriate buttons depending on where the `}<inlineCode parentName=\"li\">{`CustomPage`}</inlineCode>{` is rendered`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"render-the-edit-button-on-custompagereview\"\n    }}>{`Render the edit button on CustomPageReview`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const CustomPageReview = ({ data, editPage }) => (\n  <>\n    <h1>\n      Hello, {data.name.first} {data.name.last}!\n    </h1>\n    <button onClick={editPage}>\n      Edit\n    </button>\n  </>\n);\n\nexport default CustomPageReview;\n`}</code></pre>\n    <p>{`There's less going on here. Just make sure your `}<inlineCode parentName=\"p\">{`CustomPageReview`}</inlineCode>{` has an edit button that calls `}<inlineCode parentName=\"p\">{`editPage`}</inlineCode>{` if the user needs to be able to edit the data on that page.`}</p>\n    <h2 {...{\n      \"id\": \"using-formulate\"\n    }}>{`Using Formulate`}</h2>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"#render-the-form-navigation-or-update-button\"\n      }}>{`Render the form navigation or update button`}</a>{` for an example of how to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/department-of-veterans-affairs/formulate\"\n      }}>{`Formulate`}</a>{` inside the schema-based forms library.`}</p>\n    <p><strong parentName=\"p\">{`The important parts`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<Formik>`}</inlineCode>{` is used to wrap the form contents on the page`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://formik.org/docs/overview\"\n            }}>{`Formik`}</a>{` is the library that Formulate uses for form state management`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is passed to `}<inlineCode parentName=\"li\">{`initialValues`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`goForward`}</inlineCode>{` is passed to `}<inlineCode parentName=\"li\">{`onSubmit`}</inlineCode>{` so navigation to the next page only occurs if there are no validation errors`}</li>\n          <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n              \"href\": \"https://formik.org/docs/tutorial\"\n            }}>{`Formik tutorial`}</a>{` for more information on how to use Formik`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Form`}</inlineCode>{` is imported form the `}<inlineCode parentName=\"li\">{`src/platform/forms/formulate-integration/Form.jsx`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This component observes the Formik state and dispatches the schema-based forms library's `}<inlineCode parentName=\"li\">{`setData`}</inlineCode>{` redux action to update the redux store containing the form data so its accessible to the rest of the forms library`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"https://formik.org/docs/api/field#name\"\n        }}><inlineCode parentName=\"a\">{`name`}</inlineCode>{` prop`}</a>{` supplied to Formulate's `}<inlineCode parentName=\"li\">{`TextField`}</inlineCode>{` uses dot notation to represent the path to the data in Formik; this corresponds to redux store at `}<inlineCode parentName=\"li\">{`form.data.<name>`}</inlineCode>{` when `}<inlineCode parentName=\"li\">{`initialValues`}</inlineCode>{` is set to `}<inlineCode parentName=\"li\">{`data`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` The schema-based forms library renders inputs with `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attributes prefixed with `}<inlineCode parentName=\"p\">{`root_`}</inlineCode>{`. When using Formulate / Formik, the input `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attributes do `}<em parentName=\"p\">{`not`}</em>{` follow the same naming convention, so the automated form tester may not work for these pages.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}