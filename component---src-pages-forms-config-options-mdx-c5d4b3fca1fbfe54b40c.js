(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"3dLD":function(e,n,t){"use strict";t.d(n,"a",(function(){return h}));var a=t("q1tI"),o=t.n(a),r=t("Wbzz");function i(){return o.a.createElement(r.StaticQuery,{query:"68798663",render:function(e){return o.a.createElement(l,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})}})}function s(e){var n=e.item;return n.href?o.a.createElement("li",{key:n.name},o.a.createElement(r.Link,{to:n.href},n.name)):o.a.createElement("li",{key:n.name},n.name," (future)")}function l(e){var n=e.items,t=e.isSublist,a=void 0!==t&&t;return n.length?o.a.createElement("ul",{className:"site-c-sidenav-list"},n.map((function(e){return e.items?o.a.createElement("li",{key:e.name},a&&o.a.createElement(s,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(l,{isSublist:!0,items:e.items})):"componentList"===e.query?o.a.createElement("li",{key:e.name},a&&o.a.createElement(s,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(i,null)):o.a.createElement(s,{item:e,key:e.name})}))):null}var m=t("MEl4"),d=t.n(m);function c(e){var n=e.location,t=d.a.sections.find((function(e){return n.pathname.includes(e.href)}));return t?o.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},o.a.createElement("div",{className:"site-c-sidenav"},o.a.createElement(l,{items:t.items}))):null}function f(e){var n=e.sourceUrl;return n?o.a.createElement("div",null,o.a.createElement("i",{class:"fa fa-edit","aria-hidden":"true"})," ",o.a.createElement("a",{href:n},"Edit this page on GitHub")):null}var u=t("8FPV");function h(e){var n=e.children,t=e.location,a=e.pageContext;return o.a.createElement(u.a,{location:t},o.a.createElement("div",{className:"vads-l-row"},o.a.createElement(c,{location:t}),o.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},n,o.a.createElement(f,{sourceUrl:a.sourceUrl}))))}},YRlm:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return m}));var a=t("zLVn"),o=(t("q1tI"),t("7ljp")),r=t("3dLD"),i={},s={_frontmatter:i},l=r.a;function m(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.mdx)(l,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"form-config-options"},"Form config options"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const formConfig = {\n  // Prefix string to add to the path for each page.\n  urlPrefix: '',\n\n  // The introduction page component. To exclude an introduction page, remove\n  // this component.\n  introduction: IntroductionComponent,\n\n  // The confirmation page component that will render after the user\n  // successfully submits the form.\n  confirmation: ConfirmationComponent,\n\n  // The prefix for Google Analytics events that are sent for different form\n  // actions.\n  trackingPrefix: '',\n\n  // The title of the form, rendered on all pages. Accepts a string or function\n  // params include (currentLocation, formConfig, formData, children)\n  title: '', // ({ formData }) => formData.needsNewTitle ? 'Alternate' : 'Form',\n\n  // The subtitle of the form, usually the form number. The subtitle is rendered\n  // on all pages when there's also a title.\n  subTitle: '',\n\n  // Schema definitions that can be referenced on any page. These are added to\n  // each page's schema in the reducer code, so that you don't have to put all\n  // of the common fields in the definitions property in each page schema. For\n  // more information on definitions, see schema.definitions below.\n  defaultDefinitions: {},\n\n  // When a user begins completing a pre-filled form, this function is called\n  // after data migrations are run for pre-filled data in order to make\n  // necessary updates to the data or form schema ahead of time.\n  prefillTransformer: (pages, formData, metadata ) => { pages, formData, metadata },\n\n  // An array of functions that are applied during a form's lifecycle\n  // The number of migration functions should be equal to the version\n  migrations: [],\n\n  // Indicates the version of a form, this should be increased when a migration is required\n  version: 0,\n\n\n  // The following are properties used during form submission\n  //\n  // Path to vets-api controller for form submission\n  submitUrl: `${environment.API_URL}/v0/health_care_applications`,\n  \n  // Function that is called upon form submission\n  submit:  (form, formConfig) => {},\n\n  // Called during form submission to transform submitted schema data\n  // Calling transformForSubmit in platform/forms-system/src/js/helpers will remove view fields from the schema data\n  transformForSubmit: (formConfig, form) => {},\n\n  // Component used as part of the default error message if submission of the form fails\n  errorText: '',\n\n  // Component that replaces the default error message component if submission of the form fails\n  submissionError: ({ form }) => {},\n\n\n  // The following properties are typically passed into a SaveInProgressIntro component in the form's introduction container\n  // <SaveInProgressIntro\n  //    prefillEnabled={props.route.formConfig.prefillEnabled}\n  //    messages={props.route.formConfig.savedFormMessages}\n  //    verifyRequiredPrefill={props.route.formConfig.verifyRequiredPrefill}\n  //    downtime={this.props.route.formConfig.downtime}\n  //>\n  savedFormMessages: {\n    notFound: errorMessages.savedFormNotFound,\n    noAuth: errorMessages.savedFormNoAuth,\n  },\n\n  // Legacy SiP configuration such as savedFormMessages will be moved into saveInProgress.\n  // All new SiP configuration will go here.\n  saveInProgress: {\n    // These messages will be displayed as-is when appropriate.\n    // The following are examples from the education benefit form 22-1995\n    messages: {\n      inProgress:\n        'Your education benefits application (22-1995) is in progress.',\n      expired:\n        'Your saved education benefits application (22-1995) has expired. If you want to apply for education benefits, please start a new application.',\n      saved: 'Your education benefits application has been saved.',\n    },\n  },\n  prefillEnabled: false,\n  downtime: {\n    requiredForPrefill: true,\n    dependencies: [services.evss, services.emis, services.mvi, services.vet360],\n    message: DowntimeMessage,\n  },\n  verifyRequiredPrefill: false,\n\n\n  // Additional information to be displayed on the Review page\n  // See platform/forms/preSubmitInfo for standard object\n  preSubmitInfo: {},\n\n  // Content to be displayed at bottom of a form, see platform/forms/components/FormFooter for standard object\n  footerContent: FormFooter,\n\n  // Component that is displayed as part of standard footerContent property\n  getHelp: GetHelpComponent,\n\n  // Function called during the loading of a form\n  onFormLoaded: ({formData, savedForms, returnUrl, formConfig, router }) => {},\n\n  // Component displayed when a form has been saved\n  // If not provided platform/forms/save-in-progress/FormSaved.jsx is used instead\n  formSavedPage: FormSaved,\n\n  // Provides additional routes that are not found within the page lists\n  // introduction and review-and-submit pages are added in automatically\n  additionalRoutes: [\n    {\n      path: 'additional-route',\n      component: AdditionalComponent,\n      pageKey: 'additional-route',\n      depends: () => {},\n    },\n  ],\n\n  // Functions and string properties used in platform/forms/components/AuthorizationComponent.jsx for form 686\n  authorize: () => {},\n  getAuthorizationState: () => {},\n  authorizationMessage: '',\n\n  // Custom text values that will be used through out a form\n  customText: {\n    reviewPageTitle: 'Review order details',\n    appSavedSuccessfullyMessage: 'Order has been saved.',\n    startNewAppButtonText: 'Start a new order',\n    continueAppButtonText: 'Continue your order',\n    finishAppLaterMessage: 'Finish this order later.',\n    appType: 'order',\n    appAction: 'placing your order',\n  },\n  \n  // The object that contains the configuration for each chapter.\n  chapters: {\n    // Each property is the key for a chapter.\n    chapterOne: {\n      // The title of the chapter.\n      title: '',\n\n      // The object that contains the pages in each chapter.\n      pages: {\n        // Each property is the key for a page, and should be unique across\n        // chapters.\n        pageOne: {\n          // The URL for the page.\n          path: 'some-path',\n\n          // The title of the page that renders on the review page.\n          title: '',\n          // `title` can also be a function that receives the current data as a\n          // parameter:\n          title: formData => `A title for ${formData.thing}`,\n\n          // Any initial data that should be set for the form.\n          initialData: {\n            field1: 'Default string'\n          },\n\n          // Specifies that a page will turn its schema into a page for each\n          // item in an array, such as an array of children with a page for each\n          // child. The schema/uiSchema for this type of page should be built as\n          // usual for an array field.\n          showPagePerItem: true,\n          // The path to the array.\n          arrayPath: 'children',\n          // Items in the array that should not have a page.\n          itemFilter: () => true,\n          // You must specify a path with an :index parameter.\n          path: 'some-path/:index',\n\n          // The JSON schema object for the page, following the JSON Schema\n          // format.\n          schema: {\n            type: 'object',\n            // A schema's properties refer to definitions. For example:\n            // \"homePhone\": { \"$ref\": \"#/definitions/phone\" } In the\n            // configuration file, the definition for `phone` must be added into\n            // definitions in order to be parsed correctly and added to\n            // `homePhone`.\n            definitions: {},\n            properties: {\n              field1: {\n                type: 'string'\n              },\n              // Fields of type `string`, `boolean`, `number`, and `array` that\n              // begin with `view:` are excluded from data that's sent to the\n              // server. Instead, their children are merged into the parent\n              // object and sent to the server. Use these to exclude fields from\n              // being sent to the server, such as a question that's only used\n              // to reveal other questions, or to group related questions\n              // together to be conditionally revealed that aren't in an object\n              // in the schema.\n              'view:field2': {\n                type: 'string'\n              },\n              'view:artificialGroup': {\n                type: 'object',\n                properties: {\n                  // `view:artificialGroup` is flattened. `subField1` and\n                  // `subField2` are siblings of `field1` when sent to the API.\n                  subField1: {\n                    type: 'string'\n                  },\n                  subField2: {\n                    type: 'boolean'\n                  }\n                }\n              }\n            }\n          },\n\n          // See \"About the `schema` and `uiSchema` objects\" below.\n          uiSchema: {\n            'ui:title': 'My form',\n            field1: {\n              'ui:title': 'My field'\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Deprecated properties still in use in applications/disability-benefits/all-claims/config/form.js\n  intentToFileUrl,\n  submitErrorText,\n}\n\nexport default formConfig\n")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object.assign({parentName:"p"},{href:"/about-the-schema-and-uischema-objects"}),"About the schema and uiSchema objects")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-forms-config-options-mdx-c5d4b3fca1fbfe54b40c.js.map