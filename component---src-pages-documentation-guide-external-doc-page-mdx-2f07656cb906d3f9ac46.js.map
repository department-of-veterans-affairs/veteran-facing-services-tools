{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/documentation-guide/external-doc-page.mdx"],"names":["ComponentList","query","render","data","SidebarItems","items","components","edges","map","comp","href","node","path","name","context","SidebarItem","item","key","to","isSublist","length","className","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","SidebarLayout","children","Layout","id","layoutProps","MDXContent","props","layout","DefaultLayout","this","Object","assign","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-documentation-guide-external-doc-page-mdx-2f07656cb906d3f9ac46.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems\n          items={data.components.edges.map(comp => ({\n            href: comp.node.path,\n            name: comp.node.context.name,\n          }))}\n        />\n      )}\n    />\n  );\n}\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        if (item.query === 'componentList') {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <ComponentList />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Layout from './Layout';\nimport Sidebar from '../components/sidebar/Sidebar';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h2 id=\"adding-external-pages-from-github-api\">Adding External Pages from Github API</h2>\n      <MDXTag name=\"p\" components={components}>{`We are going to be using Github's GraphQL API to consume markdown pages from GitHub.\nThis document will detail the process of adding pages and how it all works.`}</MDXTag>\n      <h3 id=\"why\">Why?</h3>\n      <MDXTag name=\"p\" components={components}>{`We wanted a way to get pre-existing documents from GitHub without having to\nduplicate it.`}</MDXTag>\n      <h3 id=\"how-to-add-external-pages\">How to Add External pages</h3>\n      <MDXTag name=\"p\" components={components}>{`I have created a Gatsby plugin called `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`github-api-pages`}</MDXTag>{` located at `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`/plugins/github-api-pages`}</MDXTag>{`.\nYou can learn more about creating your own plugin at `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/getting-started/common-tasks/creating-gatsby-plugins\"\n        }}>{`creating-gatsby-plugins`}</MDXTag>{`\nAll code that is interfacing with the GitHubAPI is located at `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`/plugins/github-api-pages/-github-api`}</MDXTag>{`. We should try to\nkeep any code that is interfacing with the GitHubAPI in this file so we have one source of truth.`}</MDXTag>\n      <h5 id=\"limitations\">Limitations</h5>\n      <MDXTag name=\"p\" components={components}>{`Due to GitHub's rate limit we can only grab whole directories or single files at a time.\nIf we try to get the whole repo it will give us a rate limit error. This is also due to the size of our documentation repo.`}</MDXTag>\n      <h5 id=\"data-you-will-need-to-make-the-api-request\">Data you will need to make the API request</h5>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Owner of the repo`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Repo name`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`File directory you want to add or file fileName`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`department-of-veterans-affairs/vets.gov-team/Administrative/Accessing-Staging.md\n|            owner           |     repo    |           file directory           |\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\"><MDXTag name=\"em\" components={components} parentName=\"strong\">{`Note`}</MDXTag></MDXTag>{`: The file directory is not the url but the actual directory.\nHere is an example of what the file directory should look like:`}</MDXTag>\n      <h2 id=\"github-file-directory\">github file directory</h2>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`How to add files:`}</MDXTag>{`\nAfter you have gathered the information (owner, repo, file directory) from github, now you can add the files\ninto Gatsby.`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`Located in the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`/plugins/github-api-pages/`}</MDXTag>{` you should see a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`pages`}</MDXTag>{` directory. To add github file locations\nyou need to either add it to a list or create your own list. Here are the steps of how to add your own list.`}</MDXTag>\n          <MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Add a JSON file named the main directory of your github directory. In this example we will be using `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`work-practices`}</MDXTag>{`.\nYou can see how we are using the data we gathered earlier (owner, repo, file directory). All you need to do is add your\nfile directory to the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`directoryPaths`}</MDXTag>{` array. It can be a directory or just a file location.`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n                  \"className\": \"language-JSON\"\n                }}>{`// /plugins/github-api-pages/pages/work-practices.json\n\n{\n  \"owner\": \"department-of-veterans-affairs\",\n  \"repo\": \"vets.gov-team\",\n  \"directoryPaths\": [\n    \"Work Practices/Accessibility and 508\",\n    \"Work Practices/Accessibility and 508/meeting-notes/2017-06-05-meeting-508-office.md\"\n  ]\n}\n`}</MDXTag></MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`After you have set up the JSON file, now you have to add it to the list of pages. This is\ndone in the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`/plugins/github-api-pages/pages/index.js`}</MDXTag>{` file.`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// /plugins/github-api-pages/pages/index.js\n\nexports.workPractices = require('./work-practices.json');\n`}</MDXTag></MDXTag>\n            </MDXTag>\n          </MDXTag>\n        </MDXTag>\n      </MDXTag>\n      <h3 id=\"how-it-works\">How it Works</h3>\n      <MDXTag name=\"p\" components={components}>{`Initially we were trying to use pre-existing Gatsby plugins to do this but\ncouldn't find one that did what we exactly wanted it to do. The ones that came\ncloses to doing what we wanted ended up timing out due to the massive document repo\nwe have. So we ended up writing our own local plugin. Here is a list of steps we\ntook to make this work.`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use Gatsby's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`sourceNodes`}</MDXTag>{` lifecycle hook to get data.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use GitHub's GraphQL API to query page information from GitHub`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Create a Gatsby Node for the pages`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`gatsby-transformer-remark`}</MDXTag>{` to convert the markdown data into an html document`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Create pages using the createPages lifecycle hook.`}</MDXTag>\n      </MDXTag>\n      <h4 id=\"use-gatsbys-sourcenodes-lifecycle-hook-to-get-data\">Use Gatsby's sourceNodes lifecycle hook to get data.</h4>\n      <MDXTag name=\"p\" components={components}>{`First thing we have to do to get data from an API request into Gatsby is hook into the\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sourceNodes`}</MDXTag>{` lifecycle hook. This is were Gatsby allows you to do this.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`// /plugins/github-api-pages/gatsby-node.js\n\nconst path  = require('path');\nconst githubApi = require('./github-api');\nconst githubPages = require('./pages');\n\nexports.sourceNodes = async ({\n  actions,\n  getNode,\n  hasNodeChanged,\n}) => {\n  const { createNode } = actions\n\n  await githubApi.getPagesAndCreateNodes(githubPages, createNode);\n}\n`}</MDXTag></MDXTag>\n      <h4 id=\"use-githubs-graphql-api-to-query-page-information-from-github\">Use GitHub's GraphQL API to query page information from GitHub</h4>\n      <MDXTag name=\"p\" components={components}>{`Now we have to do a API request using the Github GraphQL API. You can use the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://developer.github.com/v4/explorer/\"\n        }}>{`GitHub's GraphQL Explorer`}</MDXTag>{` to generate your query. You'll have to explore GitHub's GraphQL API to understand more but here is a reference of how to get content data from GitHub.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://platform.github.community/t/query-repo-contents-with-graphql-api/1896\"\n        }}>{`https://platform.github.community/t/query-repo-contents-with-graphql-api/1896`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Here is an example of what it looks like.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`// gatsby-node.js\n\nconst crypto = require('crypto');\nconst GithubGraphQLApi = require('node-github-graphql');\nconst path = require('path');\n\nconst github = new GithubGraphQLApi({\n  token: process.env.GITHUB_API_KEY,\n});\n\nexports.sourceNodes = async ({\n  boundActionCreators,\n  getNode,\n  hasNodeChanged,\n}) => {\n  const { createNode } = boundActionCreators\n\n  const result = await github.query(\\`\n    {\n      repository(owner: \"department-of-veterans-affairs\" , name: \"vets.gov-team\"){\n        id\n        name\n        object (expression: \"master:Work Practices\"){\n          ... on Tree {\n            entries {\n              oid\n              name\n              object {\n                ... on Tree {\n                  entries {\n                    oid\n                    name\n                    object {\n                      ... on Blob {\n                        text\n                      }\n                    }\n                  }\n                }\n                ... on Blob {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  \\`);\n}\n`}</MDXTag></MDXTag>\n      <h4 id=\"create-a-gatsby-node-for-the-pages\">Create a Gatsby Node for the pages</h4>\n      <MDXTag name=\"p\" components={components}>{`After that we have to create a Node so that Gatsby can add it to the GraphQL data system.\nThere are notes in the below code which shows what is required and what is optional.\nYou may add custom properties that will be available in GraphQL.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`// gatsby-node.js\n\nconst crypto = require('crypto');\nconst GithubGraphQLApi = require('node-github-graphql');\nconst path = require('path');\n\nconst github = new GithubGraphQLApi({\n  token: process.env.GITHUB_API_KEY,\n});\n\nexports.sourceNodes = async ({\n  boundActionCreators,\n  getNode,\n  hasNodeChanged,\n}) => {\n  const { createNode } = boundActionCreators\n\n  const result = await github.query(\\`\n    {\n      repository(owner: \"department-of-veterans-affairs\" , name: \"vets.gov-team\"){\n        id\n        name\n        object (expression: \"master:Work Practices\"){\n          ... on Tree {\n            entries {\n              oid\n              name\n              object {\n                ... on Tree {\n                  entries {\n                    oid\n                    name\n                    object {\n                      ... on Blob {\n                        text\n                      }\n                    }\n                  }\n                }\n                ... on Blob {\n                  text\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  \\`);\n\n  result\n    .data\n    .repository\n    .object\n    .entries.filter(item => item.name.endsWith('.md')).forEach(({ name, oid, object }) => {\n      createNode({\n        id: oid, <---- required\n        parent: null, <---- required\n        children: [], <---- required\n        internal: { <---- required\n          type: 'GithubAPI', <---- define type for look up in GraphQL\n          contentDigest: crypto  <---- required\n            .createHash('md5')\n            .update(object.text)\n            .digest('hex'),\n          mediaType: 'text/markdown', <---- required\n          content: object.text, <---- required\n          directory: dir, <---- custom properties\n          name: name.replace('.md', ''), <---- custom properties\n        }\n      });\n    });\n}\n`}</MDXTag></MDXTag>\n      <h4 id=\"use-gatsby-transformer-remark-to-convert-the-markdown-data-into-an-html-document\">Use gatsby-transformer-remark to convert the markdown data into an html document</h4>\n      <MDXTag name=\"p\" components={components}>{`When we did a `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`createNode`}</MDXTag>{` we set the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`mediaType: 'text/markdown'`}</MDXTag>{`. This will automatically convert the markdown using `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`gatsby-transformer-remark`}</MDXTag>{`.`}</MDXTag>\n      <h3 id=\"create-pages-using-the-createpages-lifecycle-hook\">Create pages using the createPages lifecycle hook</h3>\n      <MDXTag name=\"p\" components={components}>{`After everything is set and we have all our pages in GraphQL. We can now create pages using our new data. Here is an example.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`// gatsby-node.js\n\nresult.data.allMarkDown.edges.forEach(async ({ node }) => {\n  createPage({\n    path: \\`/\\${node.fields.slug.toLowerCase().replace(/ /g, '-')}/\\`,\n    component: path.resolve('./src/layouts/external-layout.js'),\n    context: {\n      id: node.id,\n      name: node.fields.slug,\n    },\n  })\n})\n`}</MDXTag></MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}