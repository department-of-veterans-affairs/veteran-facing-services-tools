{"version":3,"sources":["webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/components/pageFooter/Components.jsx","webpack:///./src/components/pageFooter/Documentation.jsx","webpack:///./src/components/pageFooter/PageFooter.jsx","webpack:///./src/layouts/SidebarLayout.jsx","webpack:///./src/pages/forms/about-the-schema-and-uischema-objects.mdx"],"names":["ComponentList","query","render","data","SidebarItems","items","components","edges","map","comp","href","node","path","name","context","SidebarItem","item","key","to","isSublist","length","className","Sidebar","location","sidebarSection","sidebarData","sections","find","section","pathname","includes","componentToMatch","toLowerCase","ComponentItem","link","base","Components","splits","split","Documentation","level1","indexmdx","Array","isArray","lvl2Item","getIndexMdx","PageFooter","class","aria-hidden","getGithubHref","SidebarLayout","children","Layout","id","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","props","mdxType","parentName","isMDXComponent"],"mappings":"q5IASA,SAASA,IACP,OACE,kBAAC,cAAD,CACEC,MAAK,aAkBLC,OAAQ,SAAAC,GAAI,OACV,kBAACC,EAAD,CACEC,MAAOF,EAAKG,WAAWC,MAAMC,KAAI,SAAAC,GAAI,MAAK,CACxCC,KAAMD,EAAKE,KAAKC,KAChBC,KAAMJ,EAAKE,KAAKG,QAAQD,YAvBhC,SA+BJ,SAASE,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACrB,OAAIA,EAAKN,KAEL,wBAAIO,IAAKD,EAAKH,MACZ,kBAAC,OAAD,CAAMK,GAAIF,EAAKN,MAAOM,EAAKH,OAI1B,wBAAII,IAAKD,EAAKH,MAAOG,EAAKH,KAA1B,aAEM,SAAST,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,MAA4B,IAArBc,iBAAqB,SACjE,OAAKd,EAAMe,OAKT,wBAAIC,UAAU,uBACXhB,EAAMG,KAAI,SAAAQ,GACT,OAAIA,EAAKX,MAEL,wBAAIY,IAAKD,EAAKH,MACXM,GAAa,kBAACJ,EAAD,CAAaC,KAAMA,KAC/BG,GAAa,wBAAIE,UAAU,mBAAmBL,EAAKH,MACrD,kBAACT,EAAD,CAAce,WAAS,EAACd,MAAOW,EAAKX,SAIvB,kBAAfW,EAAKf,MAEL,wBAAIgB,IAAKD,EAAKH,MACXM,GAAa,kBAACJ,EAAD,CAAaC,KAAMA,KAC/BG,GAAa,wBAAIE,UAAU,mBAAmBL,EAAKH,MACrD,kBAACb,EAAD,OAIC,kBAACe,EAAD,CAAaC,KAAMA,EAAMC,IAAKD,EAAKH,WAxBvC,K,yBC5CI,SAASS,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAC1BC,EAAiBC,IAAYC,SAASC,MAAK,SAAAC,GAAO,OACtDL,EAASM,SAASC,SAASF,EAAQlB,SAGrC,OAAKc,EAKH,yBAAKH,UAAU,qCACb,yBAAKA,UAAU,kBACb,kBAACjB,EAAD,CAAcC,MAAOmB,EAAenB,UANjC,K,gBCPX,SAASL,EAAT,GAA8C,IAArB+B,EAAoB,EAApBA,iBACvB,OACE,kBAAC,cAAD,CACE9B,MAAK,aAkBLC,OAAQ,SAACC,GAAD,OACNA,EAAKG,WAAWC,MAAMC,KAAI,SAACC,GACzB,OAAOsB,IAAqBtB,EAAKE,KAAKG,QAAQD,KAAKmB,cACjD,kBAACC,EAAD,CACEjB,KAAM,CACJH,KAAMJ,EAAKE,KAAKG,QAAQD,QAI5B,OA5BR,SAoCJ,SAASoB,EAAT,GAAkC,IAATjB,EAAQ,EAARA,KAGjBkB,EAAOC,uIAAwBnB,EAAKH,KAAO,IAAMG,EAAKH,KAAO,OACnE,OAAO,kBAAC,OAAD,CAAMK,GAAIgB,GAAV,4BAGM,SAASE,EAAT,GAAmC,IAC1CC,EADyC,EAAZR,SACXS,MAAM,KAC9B,OAAO,kBAAC,EAAD,CAAeP,iBAAkBM,EAAO,KCRlC,SAASE,EAAT,GAAsC,IAAbhB,EAAY,EAAZA,SAGhCW,EACJC,+HAAuBZ,EAASM,SAxChB,SAACN,GACnB,IAAMC,EAAiBC,IAAYC,SAASC,MAAK,SAACC,GAAD,OAC/CL,EAASM,SAASC,SAASF,EAAQlB,SAI/B8B,EAASf,IAAYC,SAASC,MAClC,SAACC,GAAD,OAAaA,EAAQlB,OAASa,EAASM,YAGzC,GAAIW,aAAJ,EAAIA,EAAQC,SACV,MAAO,SAIT,IAAIjB,aAAJ,EAAIA,EAAgBnB,QACKmB,EAAenB,MAAMG,KAAI,SAACQ,GAC/C,OAAO0B,MAAMC,QAAQ3B,EAAKX,OACtBW,EAAKX,MAAMsB,MAAK,SAACiB,GAAD,OAAcA,EAASlC,OAASa,EAASM,YACzD,QAGwBrB,KAAI,SAACoB,GACjC,IAAIA,aAAA,EAAAA,EAASlB,OAAQkB,EAAQlB,OAASa,EAASM,SAC7C,SAAOD,aAAA,EAAAA,EAASa,aAITd,MAAK,SAACc,GAAD,OAAcA,KAC5B,MAAO,SAIX,MAAO,GAOsCI,CAAYtB,GAAY,OAErE,OAAO,kBAAC,OAAD,CAAML,GAAIgB,GAAV,4BC1CM,SAASY,EAAT,GAAmC,IAAbvB,EAAY,EAAZA,SACnC,OACE,6BACE,2BACE,6BACA,uBAAGwB,MAAM,aAAaC,cAAY,SAFpC,IAXgB,SAACzB,GACrB,OAAIA,EAASM,SAASC,SAAS,cACtB,kBAACM,EAAD,CAAYP,SAAUN,EAASM,WAE/B,kBAACU,EAAD,CAAehB,SAAUA,IASmB0B,CAAc1B,KCJtD,SAAS2B,EAAT,GAAgD,IAAvBC,EAAsB,EAAtBA,SAAU5B,EAAY,EAAZA,SAChD,OACE,kBAAC6B,EAAA,EAAD,CAAQ7B,SAAUA,GAChB,yBAAKF,UAAU,cACb,kBAACC,EAAD,CAASC,SAAUA,IACnB,yBACE8B,GAAG,eACHhC,UAAU,2DAET8B,EACD,kBAACL,EAAD,CAAYvB,SAAUA,S,04ICjBnB+B,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDpD,EAEC,EAFDA,WACGqD,EACF,8BACD,OAAO,cAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCrD,WAAYA,EAAYsD,QAAQ,cAG5E,mBAAQ,CACN,GAAM,yCADR,yCAGA,iMAA8K,4BAAYC,WAAW,KAAvB,UAA9K,QAAyO,4BAAYA,WAAW,KAAvB,YAAzO,8EACA,wBACE,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,qBAEO,4BAAYA,WAAW,KAAvB,UAFP,WAEwE,oBAAIA,WAAW,MACvG,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,yCADQ,0CAIxB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,uCADQ,qBAEO,4BAAYA,WAAW,KAAvB,YAFP,WAE0E,oBAAIA,WAAW,MACzG,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,eAEC,4BAAYA,WAAW,KAAvB,YAFD,wBAGpB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,eAEC,4BAAYA,WAAW,KAAvB,YAFD,2BAK1B,mBAAQ,CACN,GAAM,mCADR,mCAGA,wGAAqF,4BAAYA,WAAW,KAAvB,UAArF,oIAA4Q,iCAAGA,WAAW,KAAQ,CAC9R,KAAQ,gEADgQ,6BAA5Q,KAGA,yEAAsD,iCAAGA,WAAW,KAAQ,CACxE,KAAQ,sCAD0C,OAAtD,uBAEwC,iCAAGA,WAAW,KAAQ,CAC1D,KAAQ,6CAD4B,cAFxC,sBAKA,mBAAQ,CACN,GAAM,uCADR,uCAGA,4GAAyF,4BAAYA,WAAW,KAAvB,WAAzF,gCAA6K,4BAAYA,WAAW,KAAvB,kBAA7K,oBACA,yBAAK,oCAAMA,WAAW,OAAU,IAA3B,iGASL,mCAAgB,4BAAYA,WAAW,KAAvB,MAAhB,+DAA8H,4BAAYA,WAAW,KAAvB,YAA9H,4FAA+Q,4BAAYA,WAAW,KAAvB,YAA/Q,2EACA,yBAAK,oCAAMA,WAAW,OAAU,IAA3B,2HAUL,+GAA4F,4BAAYA,WAAW,KAAvB,uBAA5F,wEACA,yBAAK,oCAAMA,WAAW,OAAU,IAA3B,mEAOL,mBAAQ,CACN,GAAM,qCADR,qCAGA,8BAAW,4BAAYA,WAAW,KAAvB,YAAX,6BAA6F,iCAAGA,WAAW,KAAQ,CAC/G,KAAQ,oFADiF,yBAA7F,QAE2C,oBAAIA,WAAW,KAAf,QAF3C,wEAEoJ,4BAAYA,WAAW,KAAvB,UAFpJ,gMAEuY,4BAAYA,WAAW,KAAvB,YAFvY,wCAEoe,iCAAGA,WAAW,KAAQ,CACtf,KAAQ,kFADwd,uCAFpe,0CAI2F,4BAAYA,WAAW,KAAvB,UAJ3F,QAIsJ,4BAAYA,WAAW,KAAvB,YAJtJ,mHAKA,wBACE,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,wDAAkI,4BAAYA,WAAW,MAAvB,UAAlI,YACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,YAApB,mBAA6F,4BAAYA,WAAW,MAAvB,cAA7F,4BAEF,0DACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gGAWL,uCAAoB,4BAAYA,WAAW,KAAvB,YAApB,cACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mFASL,gEAA6C,4BAAYA,WAAW,KAAvB,SAA7C,qEAAoK,4BAAYA,WAAW,KAAvB,YAApK,YACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6IAaL,mBAAQ,CACN,GAAM,2CADR,2CAGA,iGAA8E,iCAAGA,WAAW,KAAQ,CAChG,KAAQ,kFADkE,8BAA9E,yCAGA,wBACE,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,qFADQ,YAApB,uEAGA,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,aAApB,iGAEwH,4BAAYA,WAAW,MAAvB,SAFxH,KAGA,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,YAApB,iCAGA,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,qFADQ,cAApB,+CAIF,mBAAQ,CACN,GAAM,2CADR,2CAGA,4DAAyC,4BAAYA,WAAW,KAAvB,YAAzC,iDACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qjNA2JTH,EAAWI,gBAAiB","file":"component---src-pages-forms-about-the-schema-and-uischema-objects-mdx-5031ed37082997f0e04f.js","sourcesContent":["import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems\n          items={data.components.edges.map(comp => ({\n            href: comp.node.path,\n            name: comp.node.context.name,\n          }))}\n        />\n      )}\n    />\n  );\n}\n\nfunction SidebarItem({ item }) {\n  if (item.href) {\n    return (\n      <li key={item.name}>\n        <Link to={item.href}>{item.name}</Link>\n      </li>\n    );\n  }\n  return <li key={item.name}>{item.name} (future)</li>;\n}\nexport default function SidebarItems({ items, isSublist = false }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"site-c-sidenav-list\">\n      {items.map(item => {\n        if (item.items) {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <SidebarItems isSublist items={item.items} />\n            </li>\n          );\n        }\n        if (item.query === 'componentList') {\n          return (\n            <li key={item.name}>\n              {isSublist && <SidebarItem item={item} />}\n              {!isSublist && <h2 className=\"heading-level-4\">{item.name}</h2>}\n              <ComponentList />\n            </li>\n          );\n        }\n        return <SidebarItem item={item} key={item.name} />;\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section =>\n    location.pathname.includes(section.href),\n  );\n\n  if (!sidebarSection) {\n    return null;\n  }\n\n  return (\n    <div className=\"vads-l-col--4 site-c-content__nav\">\n      <div className=\"site-c-sidenav\">\n        <SidebarItems items={sidebarSection.items} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Finds a specific component inside a list\n *\n * @param {string} componentToMatch\n */\n\nfunction ComponentList({ componentToMatch }) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentsQuery {\n          components: allSitePage(\n            filter: { context: { source: { eq: \"component\" } } }\n            sort: { fields: [context___name], order: ASC }\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) =>\n        data.components.edges.map((comp) => {\n          return componentToMatch === comp.node.context.name.toLowerCase() ? (\n            <ComponentItem\n              item={{\n                name: comp.node.context.name,\n              }}\n            />\n          ) : (\n            ''\n          );\n        })\n      }\n    />\n  );\n}\n\nfunction ComponentItem({ item }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const formationReact = '/formation-react/src/components/';\n  const link = base + formationReact + item.name + '/' + item.name + '.mdx';\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n\nexport default function Components({ pathname }) {\n  const splits = pathname.split('/');\n  return <ComponentList componentToMatch={splits[3]} />;\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport sidebarData from '../../sidebar';\n\n/**\n * This function will return if the name of the file is index.mdx\n * instead of the default value\n * @param {object} location - Used to obtain the page location\n * @returns {string} - Return either index or empty if not needed\n */\n\nconst getIndexMdx = (location) => {\n  const sidebarSection = sidebarData.sections.find((section) =>\n    location.pathname.includes(section.href),\n  );\n\n  // Test first Level of the sidebar object\n  const level1 = sidebarData.sections.find(\n    (section) => section.href === location.pathname,\n  );\n\n  if (level1?.indexmdx) {\n    return '/index';\n  }\n\n  // Test second Level of the sidebar object\n  if (sidebarSection?.items) {\n    const level2Sections = sidebarSection.items.map((item) => {\n      return Array.isArray(item.items)\n        ? item.items.find((lvl2Item) => lvl2Item.href === location.pathname)\n        : null;\n    });\n\n    const level2 = level2Sections.map((section) => {\n      if (section?.href && section.href === location.pathname) {\n        return section?.indexmdx ? true : false;\n      }\n    });\n\n    if (level2.find((indexmdx) => indexmdx)) {\n      return '/index';\n    }\n  }\n\n  return '';\n};\n\nexport default function Documentation({ location }) {\n  const base = `https://github.com/department-of-veterans-affairs/veteran-facing-services-tools/blob/master/packages`;\n  const documentation = '/documentation/src/pages';\n  const link =\n    base + documentation + location.pathname + getIndexMdx(location) + '.mdx';\n\n  return <Link to={link}>Edit this page on GitHub</Link>;\n}\n","import React from 'react';\nimport Components from './Components';\nimport Documentation from './Documentation';\n\nconst getGithubHref = (location) => {\n  if (location.pathname.includes('components')) {\n    return <Components pathname={location.pathname} />;\n  } else {\n    return <Documentation location={location} />;\n  }\n};\n\nexport default function PageFooter({ location }) {\n  return (\n    <div>\n      <p>\n        <br />\n        <i class=\"fa fa-edit\" aria-hidden=\"true\"></i> {getGithubHref(location)}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Layout from './Layout';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport PageFooter from '../components/pageFooter/PageFooter';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nexport default function SidebarLayout({ children, location }) {\n  return (\n    <Layout location={location}>\n      <div className=\"vads-l-row\">\n        <Sidebar location={location} />\n        <div\n          id=\"main-content\"\n          className=\"vads-l-col--8 site-c-content__content docSearch-content\"\n        >\n          {children}\n          <PageFooter location={location} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nSidebarLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"about-the-schema-and-uischema-objects\"\n    }}>{`About the schema and uiSchema objects`}</h1>\n    <p>{`The VA.gov Forms System lets you build web-based forms using the JSON Schema standard for form data and React for the form UI. The form data and UI are represented by `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` objects, respectively, which are included in the form configuration file.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#understanding-the-schema-object\"\n        }}>{`Understanding the `}<inlineCode parentName=\"a\">{`schema`}</inlineCode>{` object`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#describing-object-fields-and-arrays\"\n            }}>{`Describing object fields and arrays`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#understanding-the-uischema-object\"\n        }}>{`Understanding the `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` object`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#configuring-uischema-using-rjsf-options\"\n            }}>{`Configuring `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` using RJSF options`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#configuring-uischema-using-vafs-options\"\n            }}>{`Configuring `}<inlineCode parentName=\"a\">{`uiSchema`}</inlineCode>{` using VAFS options`}</a></li>\n        </ul></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"understanding-the-schema-object\"\n    }}>{`Understanding the schema object`}</h2>\n    <p>{`The JSON Schema standard describes the allowed shape of JSON objects. Using a `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` object, a JSON schema provides information about structured JSON data. For more information about the JSON Schema Standard, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://spacetelescope.github.io/understanding-json-schema/\"\n      }}>{`Understanding JSON Schema`}</a>{`.`}</p>\n    <p>{`For JSON Schema validator libraries, VAFS uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/ajv\"\n      }}>{`ajv`}</a>{` for unit tests and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/jsonschema\"\n      }}>{`jsonschema`}</a>{` in the VAFS code.`}</p>\n    <h3 {...{\n      \"id\": \"describing-object-fields-and-arrays\"\n    }}>{`Describing object fields and arrays`}</h3>\n    <p>{`This example describes a JSON document that is an object with one property called `}<inlineCode parentName=\"p\">{`myField`}</inlineCode>{`, which is a number, meaning `}<inlineCode parentName=\"p\">{`{ myField: 2 }`}</inlineCode>{` would be valid:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`However, `}<inlineCode parentName=\"p\">{`{}`}</inlineCode>{` is also valid. To require a property in an object, use the `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{` property, which takes an array of property names passed as strings. As in this example, `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{` is always on the object that contains the field, not the field itself:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'object',\n  required: ['myField'],\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Arrays work similarly to objects. This example describes an array of boolean values: `}<inlineCode parentName=\"p\">{`[true, false, true]`}</inlineCode>{`. Items can be an object schema or any other type of schema as well:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  type: 'array',\n  items: {\n    type: 'boolean'\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"understanding-the-uischema-object\"\n    }}>{`Understanding the uiSchema object`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` object was introduced by `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#react-jsonschema-form\"\n      }}>{`react-jsonschema-form`}</a>{`, or `}<em parentName=\"p\">{`RJSF`}</em>{`, as a means of describing how a form page should be rendered from a `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{`. To generate a form, react-jsonschema-form steps through the schema depth and renders different React components based on the type of data each property in the schema represents. In VAFS, `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` follows the format described in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object\"\n      }}>{`react-jsonschema-form documentation`}</a>{`, with some custom VAFS additions. The `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` objects should have a similar structure, with the same fields organized in the same way with these exceptions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{` doesn't need to contain all the fields found in the `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiSchema`}</inlineCode>{` doesn't need a `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` object for sub-fields.`}</li>\n    </ul>\n    <p>{`For example, given this schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The matching `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  'ui:title': 'My form',\n  field1: {\n    'ui:title': 'My field'\n  }\n}\n`}</code></pre>\n    <p>{`For array fields, you must specify an `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` object that contains the fields for each row in the array in the `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  'ui:title': 'My form',\n  toursOfDuty: {\n    items: {\n      branchName: {\n        'ui:title': 'Branch'\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configuring-uischema-using-rjsf-options\"\n    }}>{`Configuring uiSchema using RJSF options`}</h3>\n    <p>{`If you're not already familiar with the RJSF uiSchema options, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object\"\n      }}>{`RJSF library documentation`}</a>{`. Some commonly used options include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#object-fields-ordering\"\n        }}>{`ui:order`}</a>{`: An array of field names in the order in which they should appear.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#alternative-widgets\"\n        }}>{`ui:widget`}</a>{`: The name of an alternative widget to use for the field, for example, a custom widget called `}<inlineCode parentName=\"li\">{`yesNo`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#custom-field-components\"\n        }}>{`ui:field`}</a>{`: The name of a custom field.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#custom-css-class-names\"\n        }}>{`classNames`}</a>{`: The class names to put on the component.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"configuring-uischema-using-vafs-options\"\n    }}>{`Configuring uiSchema using VAFS options`}</h3>\n    <p>{`The VAFS code includes additional `}<inlineCode parentName=\"p\">{`uiSchema`}</inlineCode>{` functionality not found in the RJSF library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  // Used instead of the \\`title\\` property in the JSON Schema.\n  'ui:title': '',\n  // It can also be a component, which passes the current form data as a property.\n  'ui:title': ({ formData }) => <legend>{\\`A \\${formData.thing} title\\`}</legend>,\n\n  // Used instead of the \\`description\\` property in the JSON Schema. This can be a string\n  // or a React component, and is normally used on object fields in the schema to provide\n  // description text or HTML before a block of fields.\n  'ui:description': '' || DescriptionComponent,\n\n  // Customizes the field or widget you're using.\n  'ui:field': '' || FieldComponent,\n  'ui:widget': '' || WidgetComponent,\n\n  // Renders string fields on the review page. Always used when you specify a custom widget\n  // component. Can also be used with regular widgets.\n  'ui:reviewWidget': WidgetComponent,\n\n  // Renders a custom review field on the review page. Only used when you specify a widget\n  // component. The \\`children\\` parameter is a component from the \\`'ui:reviewWidget'\\`, but\n  // is only rendered by this custom reviewField if the schema for it is not an \\`object\\`\n  // or \\`array\\`; NOTE: you must return a div with a \"review-row\" class name and include\n  // child <dt> and <dd> elements to maintain accessibility standards\n  'ui:reviewField': ({ children, schema, uiSchema }) => (\n    <div className=\"review-row\">\n      <dt>\n        {uiSchema['ui:title']}\n        {uiSchema['ui:description]}\n      </dt>\n      <dd>{children}</dd>\n    </div>\n  ),\n\n  // Provides a function to make a field conditionally required. The data in the whole form,\n  // with no page breaks, is the only parameter. Don't make a field required in the JSON\n  // schema and in addition to using \\`ui:required\\` on that field. The index argument is\n  // provided if you use \\`ui:required\\` on data inside an array.\n  'ui:required': function (formData, index) {\n    return true || false;\n  },\n\n  // An array of validation functions or objects that you can use to add validation that's\n  // not possible through JSON Schema. See below for the properties passed to the validation\n  // functions and how to use them.\n  'ui:validations': [\n    /**\n     * Note the difference between the three data parameters:\n     *\n     * @param {any} fieldData The data for the current field being validated\n     * @param {object} formData The data for all the fields in every page\n     */\n    function (errors, fieldData, formData, fieldSchema, errorMessages) {\n      errors.addError('My error');\n    },\n    {\n      validator: (errors, fieldData, formData, fieldSchema, errorMessages, options) => {\n        errors.addError('My other error');\n      },\n      options: {}\n    }\n  ],\n\n  // An object with field-specific error messages. Structured by error name (from JSON Schema\n  // error types). This is passed to custom validations in \\`ui:validations\\` in order to allow\n  // configurable error messages in a validator.\n  'ui:errorMessages': {\n    'pattern': 'Please provide a value in the right format'\n  },\n  'ui:options': {\n\n    // An map of enum values to labels that are shown by the select and radio widgets.\n    labels: {\n      chapter30: 'A readable description (Chapter 30)'\n    },\n\n    // A map of values to a component, text, or JSX\n    // (https://reactjs.org/docs/introducing-jsx.html). If your field is a radio widget, the\n    // content here is shown underneath the radio button for that value when it's selected.\n    nestedContent: {\n      'value': <p>Some text</p>\n    },\n\n    // A string of class names that are added to the widget for the current field.\n    // \\`widgetClassNames\\` is similar to the default \\`classNames\\` property, but it puts the\n    // class names on the input/select/etc element itself, rather than a surrounding \\`div\\`.\n    widgetClassNames: '',\n\n    // For array fields, this component is shown when the item in the array is rendered as\n    // read-only on a page that is not a review page.\n    viewField: RowViewComponent,\n\n    // To show a field only when another field is true, set this option to the property name.\n    // It wraps the fields with an ExpandingGroup component using the \\`expandUnder\\` field as\n    // the first question.\n    expandUnder: '',\n\n    // To match to a specific value, use the \\`expandUnderCondition\\` option to specify the\n    // value that the \\`expandUnder\\` field's data should equal.\n    expandUnderCondition: 'someValue',\n    // \\`expandUnderCondition\\` can also be a function that receives the data from the\n    // \\`expandUnder\\` field as an argument.\n    expandUnderCondition: (field) => field === 'someValue' || field === 'someOtherValue',\n\n    // When using the expandUnder option, you can set \\`expandUnderClassNames\\` on the field\n    // specified by \\`expandUnder\\` and it will add classes to the \\`div\\` that wraps all of the\n    // fields when they're expanded. See cookbook for an example use case.\n    expandUnderClassNames: '',\n\n    // Hides the specified field on the review page.\n    hideOnReview: true || false,\n\n    // Hides the specified field on the review page when the field value is \\`false\\`.\n    hideOnReviewIfFalse: true || false,\n\n    // Hide review row entry if the form value is an empty string, null or undefined\n    // This option is ignored if there is a custom \\`'ui:reviewField'\\` defined\n    hideEmptyValueInReview: true || false,\n\n    // Hides label added before the widget\n    hideLabelText: true || false,\n\n    // use label or legend (inside fieldset)\n    showFieldLabel: 'label', // vs anything other than 'label'\n\n    // A function that conditionally hides fields in the form. \\`hideIf\\` provides the \\`index\\`\n    // argument when you use \\`ui:required\\` on data inside an array.\n    hideIf: function (formData, index) {\n      return true || false;\n    },\n\n    // A function that conditionally replaces the current field's schema. \\`updateSchema\\`\n    // provides the \\`index\\` argument when you use \\`ui:required\\` on data inside an array.\n    updateSchema: function (formData, schema, uiSchema, index, pathToCurrentData) {\n      // This function returns an object with the properties you want to update. Instead of\n      // replacing the existing schema, it updates the individual properties.\n      return {\n        type: 'string'\n      };\n    },\n\n    // By default, array fields that are displayed on a single page in a form, such as\n    // information for multiple dependents, are displayed in a separate section on the\n    // review page. To keep the information in a single section on a review page, set\n    // this property to \\`true\\`.\n    keepInPageOnReview: true\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}