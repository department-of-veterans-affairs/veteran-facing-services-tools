(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"3dLD":function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var a=n("q1tI"),r=n.n(a),o=n("Wbzz");function i(){return r.a.createElement(o.StaticQuery,{query:"68798663",render:function(e){return r.a.createElement(m,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})}})}function l(e){var t=e.item;return t.href?r.a.createElement("li",{key:t.name},r.a.createElement(o.Link,{to:t.href},t.name)):r.a.createElement("li",{key:t.name},t.name," (future)")}function m(e){var t=e.items,n=e.isSublist,a=void 0!==n&&n;return t.length?r.a.createElement("ul",{className:"site-c-sidenav-list"},t.map((function(e){return e.items?r.a.createElement("li",{key:e.name},a&&r.a.createElement(l,{item:e}),!a&&r.a.createElement("h2",{className:"heading-level-4"},e.name),r.a.createElement(m,{isSublist:!0,items:e.items})):"componentList"===e.query?r.a.createElement("li",{key:e.name},a&&r.a.createElement(l,{item:e}),!a&&r.a.createElement("h2",{className:"heading-level-4"},e.name),r.a.createElement(i,null)):r.a.createElement(l,{item:e,key:e.name})}))):null}var c=n("MEl4"),s=n.n(c);function d(e){var t=e.location,n=s.a.sections.find((function(e){return t.pathname.includes(e.href)}));return n?r.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},r.a.createElement("div",{className:"site-c-sidenav"},r.a.createElement(m,{items:n.items}))):null}function p(e){var t=e.sourceUrl;return r.a.createElement("div",null,r.a.createElement("i",{class:"fa fa-edit","aria-hidden":"true"})," ",r.a.createElement("a",{href:t},"Edit this page on GitHub"))}var u=n("8FPV");function b(e){var t=e.children,n=e.location,a=e.pageContext;return r.a.createElement(u.a,{location:n},r.a.createElement("div",{className:"vads-l-row"},r.a.createElement(d,{location:n}),r.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},t,r.a.createElement(p,{sourceUrl:a.sourceUrl}))))}},s4T1:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return c}));var a=n("zLVn"),r=(n("q1tI"),n("7ljp")),o=n("3dLD"),i={},l={_frontmatter:i},m=o.a;function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.mdx)(m,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"debugging-tests"},"Debugging tests"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},Object(r.mdx)("em",{parentName:"strong"}," Unit Tests "))),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"You can put a console.log in your test code. When you run the test, the output will be in the command line.")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"Use Chrome devtools to debug unit tests"),Object(r.mdx)("ol",{parentName:"li"},Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"Go to ",Object(r.mdx)("a",Object.assign({parentName:"p"},{href:"chrome://inspect/"}),"chrome://inspect/"),".")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"Add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"debugger")," statement in your test code and if you want to run only your test add the ",Object(r.mdx)("strong",{parentName:"p"},".only")," on your test like so. Make sure to remove the ",Object(r.mdx)("strong",{parentName:"p"},".only")," once you are done."),Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),"  it.only('testing something', () => {\n    debugger\n\n    expect(value).to.eq(true);\n  })\n"))),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"run in the terminal"),Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),"  $ BABEL_ENV=test node_modules/.bin/mocha --inspect-brk --opts src/platform/testing/unit/mocha.opts --recursive '{test,src}/**/*.unit.spec.js?(x)' src/platform/testing/unit/helper.js\n"))),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",Object(r.mdx)("inlineCode",{parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"It might take awhile for the tests to setup, just be patient and eventually it will run.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"Once the test runs, your code should break at your debugger statement.")))),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"VSCode's debugging tool for unit tests"),Object(r.mdx)("ul",{parentName:"li"},Object(r.mdx)("li",{parentName:"ul"},"Add this ",Object(r.mdx)("inlineCode",{parentName:"li"},"Mocha Tests")," configuration to your ",Object(r.mdx)("inlineCode",{parentName:"li"},".vscode/launch.json")," file",Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),'  {\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Mocha Tests",\n            "env": {"BABEL_ENV": "test"},\n            "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/mocha",\n            "runtimeArgs": [\n                "--inspect",\n                "--opts",\n                "${workspaceFolder}/src/platform/testing/unit/mocha.opts",\n                "--recursive",\n                "${workspaceFolder}/{test,src}/**/*.unit.spec.js?(x)",\n                "${workspaceFolder}/src/platform/testing/unit/helper.js"\n            ],\n            "port": 9229\n        }\n    ]\n  }\n'))),Object(r.mdx)("li",{parentName:"ul"},"Now you can add breakpoints or debugger statements to debug your code through the VSCode debugger tools.")))),Object(r.mdx)("p",null,"*** End to End tests"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"It's possible to set an infinite pause (",Object(r.mdx)("inlineCode",{parentName:"p"},".pause()"),") in the test code and then see what's happening at a given point in the browser where the test is running."),Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),"  client\n    .openUrl('http://localhost:3000')\n    .waitForElementVisible('body', Timeouts.normal)\n    .pause()\n    .click('.submit_button')\n"))),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("p",{parentName:"li"},"Using Node Chrome DevTools. You can add a (",Object(r.mdx)("inlineCode",{parentName:"p"},".perform"),") method and either console.log or add a debugger statement to debug your code in the callback function."),Object(r.mdx)("ol",{parentName:"li"},Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"add a perform method in your code."),Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),"client\n  .openUrl('http://localhost:3000')\n  .waitForElementVisible('body', Timeouts.normal)\n  .perform(() => {\n    console.log(testData);\n\n    debugger\n  })\n  .click('.submit_button')\n"))),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"open up ",Object(r.mdx)("a",Object.assign({parentName:"p"},{href:"chrome://inspect"}),"chrome://inspect")," in your browser.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"In your terminal run. You can pass in a specific file path to test after the ",Object(r.mdx)("inlineCode",{parentName:"p"},"nightwatch.js")," or leave it blank to run all tests."),Object(r.mdx)("pre",{parentName:"li"},Object(r.mdx)("code",Object.assign({parentName:"pre"},{}),"$ BABEL_ENV=test WEB_PORT=3001 node --inspect-brk node_modules/nightwatch/bin/runner.js -c config/nightwatch.js [optional file to test]\n"))),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",Object(r.mdx)("inlineCode",{parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("p",{parentName:"li"},"after the program starts it should pause at your debugger statement or you should see your console.logs in the console."))))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-debugging-tests-mdx-ca88591026ef5006024d.js.map