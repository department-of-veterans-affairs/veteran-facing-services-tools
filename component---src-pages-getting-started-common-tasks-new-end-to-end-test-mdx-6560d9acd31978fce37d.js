(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"1nT/":function(e){e.exports=JSON.parse('{"data":{"components":{"edges":[{"node":{"path":"/visual-design/components/accepttermsprompt/","context":{"source":"component","name":"AcceptTermsPrompt"}}},{"node":{"path":"/visual-design/components/additionalinfo/","context":{"source":"component","name":"AdditionalInfo"}}},{"node":{"path":"/visual-design/components/alertbox/","context":{"source":"component","name":"AlertBox"}}},{"node":{"path":"/visual-design/components/breadcrumbs/","context":{"source":"component","name":"Breadcrumbs"}}},{"node":{"path":"/visual-design/components/collapsiblepanel/","context":{"source":"component","name":"CollapsiblePanel"}}},{"node":{"path":"/visual-design/components/dropdownpanel/","context":{"source":"component","name":"DropDownPanel"}}},{"node":{"path":"/visual-design/components/errorablecheckbox/","context":{"source":"component","name":"ErrorableCheckbox"}}},{"node":{"path":"/visual-design/components/errorablecheckboxgroup/","context":{"source":"component","name":"ErrorableCheckboxGroup"}}},{"node":{"path":"/visual-design/components/errorabledate/","context":{"source":"component","name":"ErrorableDate"}}},{"node":{"path":"/visual-design/components/errorablefileinput/","context":{"source":"component","name":"ErrorableFileInput"}}},{"node":{"path":"/visual-design/components/errorablemonthyear/","context":{"source":"component","name":"ErrorableMonthYear"}}},{"node":{"path":"/visual-design/components/errorablenumberinput/","context":{"source":"component","name":"ErrorableNumberInput"}}},{"node":{"path":"/visual-design/components/errorableradiobuttons/","context":{"source":"component","name":"ErrorableRadioButtons"}}},{"node":{"path":"/visual-design/components/errorableselect/","context":{"source":"component","name":"ErrorableSelect"}}},{"node":{"path":"/visual-design/components/errorabletextarea/","context":{"source":"component","name":"ErrorableTextArea"}}},{"node":{"path":"/visual-design/components/errorabletextinput/","context":{"source":"component","name":"ErrorableTextInput"}}},{"node":{"path":"/visual-design/components/expandinggroup/","context":{"source":"component","name":"ExpandingGroup"}}},{"node":{"path":"/visual-design/components/helpmenu/","context":{"source":"component","name":"HelpMenu"}}},{"node":{"path":"/visual-design/components/iconbase/","context":{"source":"component","name":"IconBase"}}},{"node":{"path":"/visual-design/components/iconhelp/","context":{"source":"component","name":"IconHelp"}}},{"node":{"path":"/visual-design/components/iconsearch/","context":{"source":"component","name":"IconSearch"}}},{"node":{"path":"/visual-design/components/iconuser/","context":{"source":"component","name":"IconUser"}}},{"node":{"path":"/visual-design/components/loadingindicator/","context":{"source":"component","name":"LoadingIndicator"}}},{"node":{"path":"/visual-design/components/megamenu/","context":{"source":"component","name":"MegaMenu"}}},{"node":{"path":"/visual-design/components/modal/","context":{"source":"component","name":"Modal"}}},{"node":{"path":"/visual-design/components/ombinfo/","context":{"source":"component","name":"OMBInfo"}}},{"node":{"path":"/visual-design/components/pagination/","context":{"source":"component","name":"Pagination"}}},{"node":{"path":"/visual-design/components/privacyagreement/","context":{"source":"component","name":"PrivacyAgreement"}}},{"node":{"path":"/visual-design/components/progressbar/","context":{"source":"component","name":"ProgressBar"}}},{"node":{"path":"/visual-design/components/progressbutton/","context":{"source":"component","name":"ProgressButton"}}},{"node":{"path":"/visual-design/components/promobanner/","context":{"source":"component","name":"PromoBanner"}}},{"node":{"path":"/visual-design/components/searchmenu/","context":{"source":"component","name":"SearchMenu"}}},{"node":{"path":"/visual-design/components/segmentedprogressbar/","context":{"source":"component","name":"SegmentedProgressBar"}}},{"node":{"path":"/visual-design/components/sortabletable/","context":{"source":"component","name":"SortableTable"}}},{"node":{"path":"/visual-design/components/systemdownview/","context":{"source":"component","name":"SystemDownView"}}},{"node":{"path":"/visual-design/components/telephone/","context":{"source":"component","name":"Telephone"}}}]}}}')},"3dLD":function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var a=n("q1tI"),o=n.n(a),s=n("8FPV"),i=(n("gu/5"),n("eoYm"),n("v9g0"),n("pJf4"),n("1nT/")),r=n("Wbzz");function c(){return o.a.createElement(r.StaticQuery,{query:"4277382034",render:function(e){return o.a.createElement(l,{items:e.components.edges.map((function(e){return{href:e.node.path,name:e.node.context.name}}))})},data:i})}function m(e){var t=e.item;return t.href?o.a.createElement("li",{key:t.name},o.a.createElement(r.Link,{to:t.href},t.name)):o.a.createElement("li",{key:t.name},t.name," (future)")}function l(e){var t=e.items,n=e.isSublist,a=void 0!==n&&n;return t.length?o.a.createElement("ul",{className:"site-c-sidenav-list"},t.map((function(e){return e.items?o.a.createElement("li",{key:e.name},a&&o.a.createElement(m,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(l,{isSublist:!0,items:e.items})):"componentList"===e.query?o.a.createElement("li",{key:e.name},a&&o.a.createElement(m,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(c,null)):o.a.createElement(m,{item:e,key:e.name})}))):null}var d=n("MEl4"),p=n.n(d);function u(e){var t=e.location,n=p.a.sections.find((function(e){return t.pathname.includes(e.href)}));return n?o.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},o.a.createElement("div",{className:"site-c-sidenav"},o.a.createElement(l,{items:n.items}))):null}function b(e){var t=e.children,n=e.location;return o.a.createElement(s.a,{location:n},o.a.createElement("div",{className:"vads-l-row"},o.a.createElement(u,{location:n}),o.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},t)))}},EWft:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),o=n("3dLD");var s={},i={_frontmatter:s},r=o.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.mdx)(r,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.mdx)("h1",{id:"writing-an-end-to-end-test"},"Writing an end-to-end test"),Object(a.mdx)("p",null,"Front end engineers use end-to-end (e2e) tests in ",Object(a.mdx)("inlineCode",{parentName:"p"},"vets-website")," to validate multipage applications with client-side routing. They are primarily used to assert that:"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},"client applications render their inputs"),Object(a.mdx)("li",{parentName:"ul"},"client-side navigation occurs when the required fields are populated")),Object(a.mdx)("h2",{id:"end-to-end-testing-overview"},"End-to-end testing overview"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"vets-website")," uses ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://nightwatchjs.org"}),"Nightwatch")," to run the tests and provide the browser client"),Object(a.mdx)("li",{parentName:"ul"},"end-to-end tests are ",Object(a.mdx)("strong",{parentName:"li"},"collocated in application folder")," with the application they test"),Object(a.mdx)("li",{parentName:"ul"},"Two node apps run with the end-to-end tests:",Object(a.mdx)("ul",{parentName:"li"},Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"mockapi.js")," - hosts mock responses (see ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"#mocking-api-responses"}),"Mocking API responses"),")"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"test-server.js")," - builds a server that handles client side routes"))),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"vets-website")," must be started before end-to-end tests are run"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"vets-api")," should not be running when end-to-end tests are run")),Object(a.mdx)("h2",{id:"end-to-end-tests-conventions"},"End-to-end tests conventions"),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"00-main-test-file.e2e.spec.js")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{}),"const E2eHelpers = require('platform/testing/e2e/helpers')\nconst Timeouts = require('platform/testing/e2e/timeouts.js');\nconst MyApplicationHelpers = require('./my-application-helpers.js');\nconst testData = require('./schema/maximal-test.json');\nconst FormsTestHelpers = require('platform/testing/e2e/form-helpers');\n\n// export the test using E2eHelpers.createE2eTest\nmodule.exports = E2eHelpers.createE2eTest(client => {\n  // mock api responses\n  client.mockData({\n  // path to mock\n    path: '/v0/my-application',\n  // verb to mock\n    verb: 'post',\n  // mock response\n    value: {\n      formSubmissionId: '123fake-submission-id-567',\n      timestamp: '2016-05-16',\n    },\n  });\n\n  // use a comment to indicate what page is being tested\n  // Introduction page\n  client\n    .openUrl(`${E2eHelpers.baseUrl}/my-application`)\n    // use Timeouts constants\n    .waitForElementVisible('body', Timeouts.normal)\n    .assert.title('My Application Title | Veterans Affairs')\n    .click('.schemaform-start-button');\n\n  // disable scrolling\n  FormsTestHelpers.overrideFormsScrolling(client);\n\n  // assert navigation is successful\n  E2eHelpers.expectNavigateAwayFrom(client, '/introduction');\n\n  // Personal Information page.\n  client.expect.element('input[name=\"root_veteranFullName_first\"]').to.be\n    .visible;\n  // use functions from the helper file to perform all actions on the page\n  MyApplicationHelpers.completePersonalInformation(client, testData.data);\n  client.axeCheck('.main').click('.form-panel .usa-button-primary');\n  E2eHelpers.expectNavigateAwayFrom(\n    client,\n    '/my-application/personal-information',\n  );\n")),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"my-application-helpers.js")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{}),"const mock = require('platform/testing/e2e/mock-helpers');\nconst Timeouts = require('platform/testing/e2e/timeouts.js');\nconst Auth = require('platform/testing/e2e/auth.js');\nconst moment = require('moment');\n\nfunction completePersonalInformation(client, data) {\n  client\n    .waitForElementVisible(\n      'input[name=\"root_veteranFullName_first\"]',\n      Timeouts.normal,\n    )\n    .fill(\n      'input[name=\"root_veteranFullName_first\"]',\n      data.veteranFullName.first,\n    )\n    .fill('input[name=\"root_veteranFullName_last\"]', data.veteranFullName.last)\n}\n")),Object(a.mdx)("p",null,Object(a.mdx)("em",{parentName:"p"},"These are recommendations not requirements.")),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},"separate navigation from field input",Object(a.mdx)("ul",{parentName:"li"},Object(a.mdx)("li",{parentName:"ul"},"use a ",Object(a.mdx)("strong",{parentName:"li"},"main test file")," for navigation, assertions, and calls helpers"),Object(a.mdx)("li",{parentName:"ul"},"use a ",Object(a.mdx)("strong",{parentName:"li"},"helper file")," for filling out forms"))),Object(a.mdx)("li",{parentName:"ul"},"create separate, numbered ",Object(a.mdx)("strong",{parentName:"li"},"main test files")," to organize tests by their focus:",Object(a.mdx)("ul",{parentName:"li"},Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("strong",{parentName:"li"},"00-all-fields.e2e.spec.js")," - required and optional fields"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("strong",{parentName:"li"},"01-required.e2e.spec.js")," - only required fields"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("strong",{parentName:"li"},"02-accessibility.e2e.spec.js")," - validates accessibility"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("strong",{parentName:"li"},"03-auth.e2e.spec.js")," - validates authentication"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("strong",{parentName:"li"},"04-cross-cutting-feature.e2e.spec.js")," - validates one feature used across several pages (e.g. save in progress)"))),Object(a.mdx)("li",{parentName:"ul"},"export the end-to-end test using ",Object(a.mdx)("inlineCode",{parentName:"li"},"E2eHelpers.createE2eTest()"),"- see ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"#helpers"}),"Helpers")),Object(a.mdx)("li",{parentName:"ul"},"group tests by pages and use a comment to indicate what page is being tested"),Object(a.mdx)("li",{parentName:"ul"},"mock all api responses before starting the test. See ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"#mocking-api-responses"}),"Mocking API responses")),Object(a.mdx)("li",{parentName:"ul"},"use ",Object(a.mdx)("inlineCode",{parentName:"li"},"waitForElementVisible")," before interacting with any element on the page"),Object(a.mdx)("li",{parentName:"ul"},"use ",Object(a.mdx)("inlineCode",{parentName:"li"},"Timeouts")," constants for setting timeouts (",Object(a.mdx)("inlineCode",{parentName:"li"},"platform/testing/e2e/timeouts.js"),")"),Object(a.mdx)("li",{parentName:"ul"},"use helpers for filling data and performing actions on the page"),Object(a.mdx)("li",{parentName:"ul"},"perform ",Object(a.mdx)("inlineCode",{parentName:"li"},"axeCheck")," on the main body of the application on each page - see ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"#custom-nightwatch-commands"}),"Custom Nightwatch commands")),Object(a.mdx)("li",{parentName:"ul"},"assert that each navigation is successful")),Object(a.mdx)("h2",{id:"mocking-api-responses"},"Mocking API responses"),Object(a.mdx)("p",null,"A mock server runs with the end-to-end tests to allow tests to make production-like calls."),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/6d97a63bd60d79864661cc757814ca041648d5c9/src/platform/testing/e2e/nightwatch-commands/mockData.js#L12-L14"}),Object(a.mdx)("inlineCode",{parentName:"a"},"mockData(data, token = nul)")),Object(a.mdx)("ul",{parentName:"li"},Object(a.mdx)("li",{parentName:"ul"},"custom Nighwatch command that mocks the data at the endpoint provided"),Object(a.mdx)("li",{parentName:"ul"},"mock server is started as part of the end-to-end testing script")))),Object(a.mdx)("h2",{id:"custom-nightwatch-commands"},"Custom Nightwatch commands"),Object(a.mdx)("p",null,"Nightwatch supports extending its client api with ",Object(a.mdx)("a",Object.assign({parentName:"p"},{href:"https://nightwatchjs.org/guide/#writing-custom-commands"}),"custom commands"),". Custom commands are located in ",Object(a.mdx)("inlineCode",{parentName:"p"},"src/platform/testing/e2e/nightwatch-commands")),Object(a.mdx)("p",null,Object(a.mdx)("em",{parentName:"p"},"Command commands are available on the Nightwatch client e.g. ",Object(a.mdx)("inlineCode",{parentName:"em"},"client.axeCheck()"),". Below are some of the commonly used custom Nightwatch commands.")),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/axeCheck.js#L4-L7"}),Object(a.mdx)("inlineCode",{parentName:"a"},"axeCheck(selector)"))," - uses the ",Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/dequelabs/axe-core/blob/master/doc/developer-guide.md"}),Object(a.mdx)("inlineCode",{parentName:"a"},"axe-core"))," library to run a series of tests to check for accessibility of content and functionality for DOM nodes in the selector"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/clickIf.js#L4-L7"}),Object(a.mdx)("inlineCode",{parentName:"a"},"clickIf(selector, predicate, ...predicateArguments)"))," - clicks the input at the selector when the predicate returns true"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/fill.js#L5-L6"}),Object(a.mdx)("inlineCode",{parentName:"a"},"fill(selector, value, callback)"))," - clears the current value and sets to the value provided"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/fillAddress.js#L2-L5"}),Object(a.mdx)("inlineCode",{parentName:"a"},"fillAddress(baseName, address}"),")")," - fills an address widget with the value provided"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/343d77e2d7509cdcecee4b41c723d01ca0147881/src/platform/testing/e2e/nightwatch-commands/fillCheckbox.js#L4-L7"}),Object(a.mdx)("inlineCode",{parentName:"a"},"fillCheckbox(selector, predicate, ...predicateParams"),")")," - clicks the checkbox at the selector when the predicate returns true"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/fillDate.js#L4-L6"}),Object(a.mdx)("inlineCode",{parentName:"a"},"fillDate(fieldName, dateString}"),")")," - fills a date widget at the fieldName with the dateString provided e.g. 1990-1-28"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/master/src/platform/testing/e2e/nightwatch-commands/openUrl.js"}),Object(a.mdx)("inlineCode",{parentName:"a"},"openUrl(url, disableForesee = true)"))," - navigates to url and disables user feedback module (this can interfere with end-to-end tests)"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/selectRadio.js#L2-L6"}),Object(a.mdx)("inlineCode",{parentName:"a"},"selectRadio(fieldName, value)"))," - selects the provided option on yesNo widget at the field name"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/selectYesNo.js#L2-L6"}),Object(a.mdx)("inlineCode",{parentName:"a"},"selectYesNo(fieldName, predicate)"))," - selects the provided options on yesNo widget at the field name when the predicate returns true")),Object(a.mdx)("h2",{id:"helpers"},"Helpers"),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"src/platform/testing/e2e")," contains other useful helpers"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/helpers.js#L78-L81"}),Object(a.mdx)("inlineCode",{parentName:"a"},"createE2eTest(beginApplication)"))," - disables smooth scrolling and starts and ends test"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/nightwatch-commands/selectYesNo.js#L2-L6"}),Object(a.mdx)("inlineCode",{parentName:"a"},"overrideSmoothFormsScrolling(client)")," and ",Object(a.mdx)("inlineCode",{parentName:"a"},"overrideFormsScrolling(client)"))," - disables smooth scrolling during end-to-end testing"),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object.assign({parentName:"li"},{href:"https://github.com/department-of-veterans-affairs/vets-website/blob/d721cf0581c6b7d6f26903540dfc27f26a16a7be/src/platform/testing/e2e/helpers.js#L94"}),Object(a.mdx)("inlineCode",{parentName:"a"},"expectNavigationAwayFrom(client, urlString)"))," - asserts the current page is not at the ",Object(a.mdx)("inlineCode",{parentName:"li"},"urlString"))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-new-end-to-end-test-mdx-6560d9acd31978fce37d.js.map