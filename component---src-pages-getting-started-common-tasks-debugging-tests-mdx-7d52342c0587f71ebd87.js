(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"3dLD":function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n("q1tI"),o=n.n(a),r=n("FRpb");function i(e){var t=e.sourceUrl;return t?o.a.createElement("div",null,o.a.createElement("i",{class:"fa fa-edit","aria-hidden":"true"})," ",o.a.createElement("a",{href:t},"Edit this page on GitHub")):null}var l=n("8FPV");function c(e){var t=e.children,n=e.location,a=e.pageContext;return o.a.createElement(l.a,{location:n},o.a.createElement("div",{className:"vads-l-row site-l-wrapper"},o.a.createElement(r.a,{location:n}),o.a.createElement("div",{id:"main-content",className:"vads-l-col--8 site-c-content__content docSearch-content"},t,o.a.createElement(i,{sourceUrl:a.sourceUrl}))))}},FRpb:function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var a=n("q1tI"),o=n.n(a),r=n("Wbzz");function i(e){var t=e.item;return t.href?o.a.createElement("li",{key:t.name},o.a.createElement(r.Link,{to:t.href},t.name)):o.a.createElement("li",{key:t.name},t.name," (future)")}function l(e){var t=e.items,n=e.isSublist,a=void 0!==n&&n;return t.length?o.a.createElement("ul",{className:"site-c-sidenav-list"},t.map((function(e){return e.items?o.a.createElement("li",{key:e.name},a&&o.a.createElement(i,{item:e}),!a&&o.a.createElement("h2",{className:"heading-level-4"},e.name),o.a.createElement(l,{isSublist:!0,items:e.items})):o.a.createElement(i,{item:e,key:e.name})}))):null}var c=n("MEl4"),s=n.n(c);function b(e){var t=e.location,n=s.a.sections.find((function(e){return t.pathname.includes(e.href)}));return n?o.a.createElement("div",{className:"vads-l-col--4 site-c-content__nav"},o.a.createElement("div",{className:"site-c-sidenav"},o.a.createElement(l,{items:n.items}))):null}},s4T1:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n("zLVn"),o=(n("q1tI"),n("7ljp")),r=n("3dLD"),i=["components"],l={},c={_frontmatter:l},s=r.a;function b(e){var t=e.components,n=Object(a.a)(e,i);return Object(o.b)(s,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"debugging-tests"},"Debugging tests"),Object(o.b)("h2",{id:"unit-tests"},"Unit Tests"),Object(o.b)("div",{className:"deprecation-message"},Object(o.b)("h3",null,"We're moving our docs!"),Object(o.b)("h4",null,"Find ",Object(o.b)("a",{href:"https://depo-platform-documentation.scrollhelp.site/developer-docs/Debugging-unit-tests.1836286010.html"},"the latest version of this section")," on the Platform website."),Object(o.b)("h4",null,"Still can't find what you're looking for? Reach out to ",Object(o.b)("a",{href:"https://dsva.slack.com/archives/CBU0KDSB1"},"#vfs-platform-support")," on Slack.")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"To run tests with some extra debugging info, you can pass a ",Object(o.b)("inlineCode",{parentName:"p"},"--log-level"),":"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"  yarn test:unit --log-level debug\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"You can put a ",Object(o.b)("inlineCode",{parentName:"p"},"console.log()")," in your test code. When you run the test, the output will be in the command line.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use Chrome devtools to debug unit tests"),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Go to ",Object(o.b)("a",{parentName:"p",href:"chrome://inspect/"},"chrome://inspect/"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Add a ",Object(o.b)("inlineCode",{parentName:"p"},"debugger")," statement in your test code and if you want to run only your test add the ",Object(o.b)("strong",{parentName:"p"},".only")," on your test like so. Make sure to remove the ",Object(o.b)("strong",{parentName:"p"},".only")," once you are done."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"  it.only('testing something', () => {\n    debugger\n\n    expect(value).to.eq(true);\n  })\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"run in the terminal"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"  $ BABEL_ENV=test node_modules/.bin/mocha --inspect-brk --opts src/platform/testing/unit/mocha.opts --recursive '{test,src}/**/*.unit.spec.js?(x)' src/platform/testing/unit/helper.js\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",Object(o.b)("inlineCode",{parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"It might take awhile for the tests to setup, just be patient and eventually it will run.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Once the test runs, your code should break at your debugger statement.")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"VSCode's debugging tool for unit tests"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Add this ",Object(o.b)("inlineCode",{parentName:"li"},"Mocha Tests")," configuration to your ",Object(o.b)("inlineCode",{parentName:"li"},".vscode/launch.json")," file",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},'  {\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Mocha Tests",\n            "env": {"BABEL_ENV": "test"},\n            "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/mocha",\n            "runtimeArgs": [\n                "--inspect",\n                "--opts",\n                "${workspaceFolder}/src/platform/testing/unit/mocha.opts",\n                "--recursive",\n                "${workspaceFolder}/{test,src}/**/*.unit.spec.js?(x)",\n                "${workspaceFolder}/src/platform/testing/unit/helper.js"\n            ],\n            "port": 9229\n        }\n    ]\n  }\n'))),Object(o.b)("li",{parentName:"ul"},"Now you can add breakpoints or debugger statements to debug your code through the VSCode debugger tools.")))),Object(o.b)("h2",{id:"end-to-end-tests"},"End to End tests"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"It's possible to set an infinite pause (",Object(o.b)("inlineCode",{parentName:"p"},".pause()"),") in the test code and then see what's happening at a given point in the browser where the test is running."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"  client\n    .openUrl('http://localhost:3000')\n    .waitForElementVisible('body', Timeouts.normal)\n    .pause()\n    .click('.submit_button')\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Using Node Chrome DevTools. You can add a (",Object(o.b)("inlineCode",{parentName:"p"},".perform"),") method and either console.log or add a debugger statement to debug your code in the callback function."),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"add a perform method in your code."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"client\n  .openUrl('http://localhost:3000')\n  .waitForElementVisible('body', Timeouts.normal)\n  .perform(() => {\n    console.log(testData);\n\n    debugger\n  })\n  .click('.submit_button')\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"open up ",Object(o.b)("a",{parentName:"p",href:"chrome://inspect"},"chrome://inspect")," in your browser.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"In your terminal run. You can pass in a specific file path to test after the ",Object(o.b)("inlineCode",{parentName:"p"},"nightwatch.js")," or leave it blank to run all tests."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"$ BABEL_ENV=test WEB_PORT=3001 node --inspect-brk node_modules/nightwatch/bin/runner.js -c config/nightwatch.js [optional file to test]\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Go to your Node Chrome Developer Tools. Under ",Object(o.b)("inlineCode",{parentName:"p"},"Remote Target")," you should see your test running. Click on the link where your test is running to open the debugger tool.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You will want to press the debugger play button to start the program. It will initially pause on the first line of code.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"after the program starts it should pause at your debugger statement or you should see your console.logs in the console."))))))}b.isMDXComponent=!0},zLVn:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return a}))}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-debugging-tests-mdx-7d52342c0587f71ebd87.js.map